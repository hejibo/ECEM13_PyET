ccopy_reg
_reconstructor
p1
(cpsychopy.data
ExperimentHandler
p2
c__builtin__
object
p3
NtRp4
(dp5
S'originPath'
p6
NsS'dataFileName'
p7
Vmarcb_2013_Mar_27_1534
p8
sS'runtimeInfo'
p9
NsS'name'
p10
S'IOR'
p11
sS'dataNames'
p12
(lp13
S'RT'
p14
aS'Correct?'
p15
asS'extraInfo'
p16
(dp17
S'subj'
p18
Vmarcb
p19
ssS'loopsUnfinished'
p20
(lp21
sS'saveWideText'
p22
I01
sS'thisEntry'
p23
(dp24
sS'version'
p25
S'0.1'
p26
sS'_paramNamesSoFar'
p27
(lp28
VSOA
p29
aVstimColor
p30
aVcue
p31
asS'entries'
p32
(lp33
(dp34
g14
F0.56365513801574707
sS'trials.thisIndex'
p35
cnumpy.core.multiarray
scalar
p36
(cnumpy
dtype
p37
(S'i4'
I0
I1
tRp38
(I3
S'<'
NNNI-1
I-1
I0
tbS'\x0b\x00\x00\x00'
tRp39
sS'trials.thisRepN'
p40
I0
sS'trials.thisN'
p41
I0
sg30
Vgreen
p42
sg31
I-1
sg29
F0.5
sS'trials.thisTrialN'
p43
I0
sg15
I1
sg18
g19
sa(dp44
g14
F0.4286201000213623
sS'trials.thisIndex'
p45
g36
(g38
S'\x10\x00\x00\x00'
tRp46
sS'trials.thisRepN'
p47
I0
sS'trials.thisN'
p48
I1
sg30
Vred
p49
sg31
I1
sg29
F0.40000000000000002
sS'trials.thisTrialN'
p50
I1
sg15
I1
sg18
g19
sa(dp51
g14
F0.51616191864013672
sS'trials.thisIndex'
p52
g36
(g38
S'\x00\x00\x00\x00'
tRp53
sS'trials.thisRepN'
p54
I0
sS'trials.thisN'
p55
I2
sg30
g49
sg31
I-1
sg29
I0
sS'trials.thisTrialN'
p56
I2
sg15
I1
sg18
g19
sa(dp57
g14
F0.35935091972351074
sS'trials.thisIndex'
p58
g36
(g38
S'\x16\x00\x00\x00'
tRp59
sS'trials.thisRepN'
p60
I0
sS'trials.thisN'
p61
I3
sg30
g42
sg31
I1
sg29
F0.40000000000000002
sS'trials.thisTrialN'
p62
I3
sg15
I1
sg18
g19
sa(dp63
g14
F1.0457699298858643
sS'trials.thisIndex'
p64
g36
(g38
S'\x15\x00\x00\x00'
tRp65
sS'trials.thisRepN'
p66
I0
sS'trials.thisN'
p67
I4
sg30
g42
sg31
I1
sg29
F0.29999999999999999
sS'trials.thisTrialN'
p68
I4
sg15
I1
sg18
g19
sa(dp69
g14
F0.5278770923614502
sS'trials.thisIndex'
p70
g36
(g38
S'\x13\x00\x00\x00'
tRp71
sS'trials.thisRepN'
p72
I0
sS'trials.thisN'
p73
I5
sg30
g42
sg31
I1
sg29
F0.10000000000000001
sS'trials.thisTrialN'
p74
I5
sg15
I1
sg18
g19
sa(dp75
g14
F0.51845908164978027
sS'trials.thisIndex'
p76
g36
(g38
S'\x05\x00\x00\x00'
tRp77
sS'trials.thisRepN'
p78
I0
sS'trials.thisN'
p79
I6
sg30
g49
sg31
I-1
sg29
F0.5
sS'trials.thisTrialN'
p80
I6
sg15
I1
sg18
g19
sa(dp81
g14
F0.4722449779510498
sS'trials.thisIndex'
p82
g36
(g38
S'\x12\x00\x00\x00'
tRp83
sS'trials.thisRepN'
p84
I0
sS'trials.thisN'
p85
I7
sg30
g42
sg31
I1
sg29
I0
sS'trials.thisTrialN'
p86
I7
sg15
I1
sg18
g19
sa(dp87
g14
F0.36339879035949707
sS'trials.thisIndex'
p88
g36
(g38
S'\x17\x00\x00\x00'
tRp89
sS'trials.thisRepN'
p90
I0
sS'trials.thisN'
p91
I8
sg30
g42
sg31
I1
sg29
F0.5
sS'trials.thisTrialN'
p92
I8
sg15
I0
sg18
g19
sa(dp93
g14
F0.42905616760253906
sS'trials.thisIndex'
p94
g36
(g38
S'\x04\x00\x00\x00'
tRp95
sS'trials.thisRepN'
p96
I0
sS'trials.thisN'
p97
I9
sg30
g49
sg31
I-1
sg29
F0.40000000000000002
sS'trials.thisTrialN'
p98
I9
sg15
I0
sg18
g19
sa(dp99
g14
F0.69175601005554199
sS'trials.thisIndex'
p100
g36
(g38
S'\x06\x00\x00\x00'
tRp101
sS'trials.thisRepN'
p102
I0
sS'trials.thisN'
p103
I10
sg30
g42
sg31
I-1
sg29
I0
sS'trials.thisTrialN'
p104
I10
sg15
I1
sg18
g19
sa(dp105
g14
F0.33259892463684082
sS'trials.thisIndex'
p106
g36
(g38
S'\x0f\x00\x00\x00'
tRp107
sS'trials.thisRepN'
p108
I0
sS'trials.thisN'
p109
I11
sg30
g49
sg31
I1
sg29
F0.29999999999999999
sS'trials.thisTrialN'
p110
I11
sg15
I1
sg18
g19
sa(dp111
g14
F0.37549090385437012
sS'trials.thisIndex'
p112
g36
(g38
S'\n\x00\x00\x00'
tRp113
sS'trials.thisRepN'
p114
I0
sS'trials.thisN'
p115
I12
sg30
g42
sg31
I-1
sg29
F0.40000000000000002
sS'trials.thisTrialN'
p116
I12
sg15
I1
sg18
g19
sa(dp117
g14
F0.54805397987365723
sS'trials.thisIndex'
p118
g36
(g38
S'\x07\x00\x00\x00'
tRp119
sS'trials.thisRepN'
p120
I0
sS'trials.thisN'
p121
I13
sg30
g42
sg31
I-1
sg29
F0.10000000000000001
sS'trials.thisTrialN'
p122
I13
sg15
I1
sg18
g19
sa(dp123
g14
F0.5271151065826416
sS'trials.thisIndex'
p124
g36
(g38
S'\x02\x00\x00\x00'
tRp125
sS'trials.thisRepN'
p126
I0
sS'trials.thisN'
p127
I14
sg30
g49
sg31
I-1
sg29
F0.20000000000000001
sS'trials.thisTrialN'
p128
I14
sg15
I1
sg18
g19
sa(dp129
g14
F0.47383713722229004
sS'trials.thisIndex'
p130
g36
(g38
S'\x14\x00\x00\x00'
tRp131
sS'trials.thisRepN'
p132
I0
sS'trials.thisN'
p133
I15
sg30
g42
sg31
I1
sg29
F0.20000000000000001
sS'trials.thisTrialN'
p134
I15
sg15
I1
sg18
g19
sa(dp135
g14
F0.38680911064147949
sS'trials.thisIndex'
p136
g36
(g38
S'\r\x00\x00\x00'
tRp137
sS'trials.thisRepN'
p138
I0
sS'trials.thisN'
p139
I16
sg30
g49
sg31
I1
sg29
F0.10000000000000001
sS'trials.thisTrialN'
p140
I16
sg15
I1
sg18
g19
sa(dp141
g14
F0.35938477516174316
sS'trials.thisIndex'
p142
g36
(g38
S'\x11\x00\x00\x00'
tRp143
sS'trials.thisRepN'
p144
I0
sS'trials.thisN'
p145
I17
sg30
g49
sg31
I1
sg29
F0.5
sS'trials.thisTrialN'
p146
I17
sg15
I1
sg18
g19
sa(dp147
g14
F0.48030519485473633
sS'trials.thisIndex'
p148
g36
(g38
S'\x08\x00\x00\x00'
tRp149
sS'trials.thisRepN'
p150
I0
sS'trials.thisN'
p151
I18
sg30
g42
sg31
I-1
sg29
F0.20000000000000001
sS'trials.thisTrialN'
p152
I18
sg15
I1
sg18
g19
sa(dp153
g14
F0.42939400672912598
sS'trials.thisIndex'
p154
g36
(g38
S'\x0e\x00\x00\x00'
tRp155
sS'trials.thisRepN'
p156
I0
sS'trials.thisN'
p157
I19
sg30
g49
sg31
I1
sg29
F0.20000000000000001
sS'trials.thisTrialN'
p158
I19
sg15
I0
sg18
g19
sa(dp159
g14
F0.54438018798828125
sS'trials.thisIndex'
p160
g36
(g38
S'\t\x00\x00\x00'
tRp161
sS'trials.thisRepN'
p162
I0
sS'trials.thisN'
p163
I20
sg30
g42
sg31
I-1
sg29
F0.29999999999999999
sS'trials.thisTrialN'
p164
I20
sg15
I1
sg18
g19
sa(dp165
g14
F0.36023092269897461
sS'trials.thisIndex'
p166
g36
(g38
S'\x03\x00\x00\x00'
tRp167
sS'trials.thisRepN'
p168
I0
sS'trials.thisN'
p169
I21
sg30
g49
sg31
I-1
sg29
F0.29999999999999999
sS'trials.thisTrialN'
p170
I21
sg15
I1
sg18
g19
sa(dp171
g14
F0.53358101844787598
sS'trials.thisIndex'
p172
g36
(g38
S'\x01\x00\x00\x00'
tRp173
sS'trials.thisRepN'
p174
I0
sS'trials.thisN'
p175
I22
sg30
g49
sg31
I-1
sg29
F0.10000000000000001
sS'trials.thisTrialN'
p176
I22
sg15
I1
sg18
g19
sa(dp177
g14
F0.52073097229003906
sS'trials.thisIndex'
p178
g36
(g38
S'\x0c\x00\x00\x00'
tRp179
sS'trials.thisRepN'
p180
I0
sS'trials.thisN'
p181
I23
sg30
g49
sg31
I1
sg29
I0
sS'trials.thisTrialN'
p182
I23
sg15
I1
sg18
g19
sa(dp183
g14
F0.46382403373718262
sS'trials.thisIndex'
p184
g36
(g38
S'\x05\x00\x00\x00'
tRp185
sS'trials.thisRepN'
p186
I1
sS'trials.thisN'
p187
I24
sg30
g49
sg31
I-1
sg29
F0.5
sS'trials.thisTrialN'
p188
I0
sg15
I1
sg18
g19
sa(dp189
g14
F0.41769313812255859
sS'trials.thisIndex'
p190
g36
(g38
S'\x0b\x00\x00\x00'
tRp191
sS'trials.thisRepN'
p192
I1
sS'trials.thisN'
p193
I25
sg30
g42
sg31
I-1
sg29
F0.5
sS'trials.thisTrialN'
p194
I1
sg15
I1
sg18
g19
sa(dp195
g14
F0.5207819938659668
sS'trials.thisIndex'
p196
g36
(g38
S'\x14\x00\x00\x00'
tRp197
sS'trials.thisRepN'
p198
I1
sS'trials.thisN'
p199
I26
sg30
g42
sg31
I1
sg29
F0.20000000000000001
sS'trials.thisTrialN'
p200
I2
sg15
I0
sg18
g19
sa(dp201
g14
F0.34687709808349609
sS'trials.thisIndex'
p202
g36
(g38
S'\x04\x00\x00\x00'
tRp203
sS'trials.thisRepN'
p204
I1
sS'trials.thisN'
p205
I27
sg30
g49
sg31
I-1
sg29
F0.40000000000000002
sS'trials.thisTrialN'
p206
I3
sg15
I0
sg18
g19
sa(dp207
g14
F0.57041597366333008
sS'trials.thisIndex'
p208
g36
(g38
S'\x0f\x00\x00\x00'
tRp209
sS'trials.thisRepN'
p210
I1
sS'trials.thisN'
p211
I28
sg30
g49
sg31
I1
sg29
F0.29999999999999999
sS'trials.thisTrialN'
p212
I4
sg15
I1
sg18
g19
sa(dp213
g14
F0.41487407684326172
sS'trials.thisIndex'
p214
g36
(g38
S'\x01\x00\x00\x00'
tRp215
sS'trials.thisRepN'
p216
I1
sS'trials.thisN'
p217
I29
sg30
g49
sg31
I-1
sg29
F0.10000000000000001
sS'trials.thisTrialN'
p218
I5
sg15
I1
sg18
g19
sa(dp219
g14
F0.6544489860534668
sS'trials.thisIndex'
p220
g36
(g38
S'\x12\x00\x00\x00'
tRp221
sS'trials.thisRepN'
p222
I1
sS'trials.thisN'
p223
I30
sg30
g42
sg31
I1
sg29
I0
sS'trials.thisTrialN'
p224
I6
sg15
I1
sg18
g19
sa(dp225
g14
F0.68398690223693848
sS'trials.thisIndex'
p226
g36
(g38
S'\x0c\x00\x00\x00'
tRp227
sS'trials.thisRepN'
p228
I1
sS'trials.thisN'
p229
I31
sg30
g49
sg31
I1
sg29
I0
sS'trials.thisTrialN'
p230
I7
sg15
I1
sg18
g19
sa(dp231
g14
F0.75707507133483887
sS'trials.thisIndex'
p232
g36
(g38
S'\x15\x00\x00\x00'
tRp233
sS'trials.thisRepN'
p234
I1
sS'trials.thisN'
p235
I32
sg30
g42
sg31
I1
sg29
F0.29999999999999999
sS'trials.thisTrialN'
p236
I8
sg15
I1
sg18
g19
sa(dp237
g14
F0.43821501731872559
sS'trials.thisIndex'
p238
g36
(g38
S'\x00\x00\x00\x00'
tRp239
sS'trials.thisRepN'
p240
I1
sS'trials.thisN'
p241
I33
sg30
g49
sg31
I-1
sg29
I0
sS'trials.thisTrialN'
p242
I9
sg15
I1
sg18
g19
sa(dp243
g14
F0.60485291481018066
sS'trials.thisIndex'
p244
g36
(g38
S'\x06\x00\x00\x00'
tRp245
sS'trials.thisRepN'
p246
I1
sS'trials.thisN'
p247
I34
sg30
g42
sg31
I-1
sg29
I0
sS'trials.thisTrialN'
p248
I10
sg15
I1
sg18
g19
sa(dp249
g14
F0.52096009254455566
sS'trials.thisIndex'
p250
g36
(g38
S'\x17\x00\x00\x00'
tRp251
sS'trials.thisRepN'
p252
I1
sS'trials.thisN'
p253
I35
sg30
g42
sg31
I1
sg29
F0.5
sS'trials.thisTrialN'
p254
I11
sg15
I1
sg18
g19
sa(dp255
g14
F1.1673920154571533
sS'trials.thisIndex'
p256
g36
(g38
S'\x13\x00\x00\x00'
tRp257
sS'trials.thisRepN'
p258
I1
sS'trials.thisN'
p259
I36
sg30
g42
sg31
I1
sg29
F0.10000000000000001
sS'trials.thisTrialN'
p260
I12
sg15
I1
sg18
g19
sa(dp261
g14
F0.40454602241516113
sS'trials.thisIndex'
p262
g36
(g38
S'\x11\x00\x00\x00'
tRp263
sS'trials.thisRepN'
p264
I1
sS'trials.thisN'
p265
I37
sg30
g49
sg31
I1
sg29
F0.5
sS'trials.thisTrialN'
p266
I13
sg15
I1
sg18
g19
sa(dp267
g14
F0.48080110549926758
sS'trials.thisIndex'
p268
g36
(g38
S'\x03\x00\x00\x00'
tRp269
sS'trials.thisRepN'
p270
I1
sS'trials.thisN'
p271
I38
sg30
g49
sg31
I-1
sg29
F0.29999999999999999
sS'trials.thisTrialN'
p272
I14
sg15
I1
sg18
g19
sa(dp273
g14
F0.59362983703613281
sS'trials.thisIndex'
p274
g36
(g38
S'\x07\x00\x00\x00'
tRp275
sS'trials.thisRepN'
p276
I1
sS'trials.thisN'
p277
I39
sg30
g42
sg31
I-1
sg29
F0.10000000000000001
sS'trials.thisTrialN'
p278
I15
sg15
I1
sg18
g19
sa(dp279
g14
F1.1333608627319336
sS'trials.thisIndex'
p280
g36
(g38
S'\r\x00\x00\x00'
tRp281
sS'trials.thisRepN'
p282
I1
sS'trials.thisN'
p283
I40
sg30
g49
sg31
I1
sg29
F0.10000000000000001
sS'trials.thisTrialN'
p284
I16
sg15
I1
sg18
g19
sa(dp285
g14
F0.45240998268127441
sS'trials.thisIndex'
p286
g36
(g38
S'\t\x00\x00\x00'
tRp287
sS'trials.thisRepN'
p288
I1
sS'trials.thisN'
p289
I41
sg30
g42
sg31
I-1
sg29
F0.29999999999999999
sS'trials.thisTrialN'
p290
I17
sg15
I1
sg18
g19
sa(dp291
g14
F0.48178601264953613
sS'trials.thisIndex'
p292
g36
(g38
S'\x10\x00\x00\x00'
tRp293
sS'trials.thisRepN'
p294
I1
sS'trials.thisN'
p295
I42
sg30
g49
sg31
I1
sg29
F0.40000000000000002
sS'trials.thisTrialN'
p296
I18
sg15
I1
sg18
g19
sa(dp297
g14
F0.55061984062194824
sS'trials.thisIndex'
p298
g36
(g38
S'\n\x00\x00\x00'
tRp299
sS'trials.thisRepN'
p300
I1
sS'trials.thisN'
p301
I43
sg30
g42
sg31
I-1
sg29
F0.40000000000000002
sS'trials.thisTrialN'
p302
I19
sg15
I1
sg18
g19
sa(dp303
g14
F0.64896416664123535
sS'trials.thisIndex'
p304
g36
(g38
S'\x0e\x00\x00\x00'
tRp305
sS'trials.thisRepN'
p306
I1
sS'trials.thisN'
p307
I44
sg30
g49
sg31
I1
sg29
F0.20000000000000001
sS'trials.thisTrialN'
p308
I20
sg15
I1
sg18
g19
sa(dp309
g14
F0.45510601997375488
sS'trials.thisIndex'
p310
g36
(g38
S'\x02\x00\x00\x00'
tRp311
sS'trials.thisRepN'
p312
I1
sS'trials.thisN'
p313
I45
sg30
g49
sg31
I-1
sg29
F0.20000000000000001
sS'trials.thisTrialN'
p314
I21
sg15
I1
sg18
g19
sa(dp315
g14
F0.46819591522216797
sS'trials.thisIndex'
p316
g36
(g38
S'\x16\x00\x00\x00'
tRp317
sS'trials.thisRepN'
p318
I1
sS'trials.thisN'
p319
I46
sg30
g42
sg31
I1
sg29
F0.40000000000000002
sS'trials.thisTrialN'
p320
I22
sg15
I1
sg18
g19
sa(dp321
g14
F0.5620579719543457
sS'trials.thisIndex'
p322
g36
(g38
S'\x08\x00\x00\x00'
tRp323
sS'trials.thisRepN'
p324
I1
sS'trials.thisN'
p325
I47
sg30
g42
sg31
I-1
sg29
F0.20000000000000001
sS'trials.thisTrialN'
p326
I23
sg15
I0
sg18
g19
sa(dp327
g14
F0.4472808837890625
sS'trials.thisIndex'
p328
g36
(g38
S'\x13\x00\x00\x00'
tRp329
sS'trials.thisRepN'
p330
I2
sS'trials.thisN'
p331
I48
sg30
g42
sg31
I1
sg29
F0.10000000000000001
sS'trials.thisTrialN'
p332
I0
sg15
I1
sg18
g19
sa(dp333
g14
F0.45044088363647461
sS'trials.thisIndex'
p334
g36
(g38
S'\x11\x00\x00\x00'
tRp335
sS'trials.thisRepN'
p336
I2
sS'trials.thisN'
p337
I49
sg30
g49
sg31
I1
sg29
F0.5
sS'trials.thisTrialN'
p338
I1
sg15
I1
sg18
g19
sa(dp339
g14
F0.49974894523620605
sS'trials.thisIndex'
p340
g36
(g38
S'\x15\x00\x00\x00'
tRp341
sS'trials.thisRepN'
p342
I2
sS'trials.thisN'
p343
I50
sg30
g42
sg31
I1
sg29
F0.29999999999999999
sS'trials.thisTrialN'
p344
I2
sg15
I1
sg18
g19
sa(dp345
g14
F0.57976794242858887
sS'trials.thisIndex'
p346
g36
(g38
S'\t\x00\x00\x00'
tRp347
sS'trials.thisRepN'
p348
I2
sS'trials.thisN'
p349
I51
sg30
g42
sg31
I-1
sg29
F0.29999999999999999
sS'trials.thisTrialN'
p350
I3
sg15
I1
sg18
g19
sa(dp351
g14
F0.95696210861206055
sS'trials.thisIndex'
p352
g36
(g38
S'\x12\x00\x00\x00'
tRp353
sS'trials.thisRepN'
p354
I2
sS'trials.thisN'
p355
I52
sg30
g42
sg31
I1
sg29
I0
sS'trials.thisTrialN'
p356
I4
sg15
I1
sg18
g19
sa(dp357
g14
F0.52254104614257812
sS'trials.thisIndex'
p358
g36
(g38
S'\x07\x00\x00\x00'
tRp359
sS'trials.thisRepN'
p360
I2
sS'trials.thisN'
p361
I53
sg30
g42
sg31
I-1
sg29
F0.10000000000000001
sS'trials.thisTrialN'
p362
I5
sg15
I1
sg18
g19
sa(dp363
g14
F3.0341930389404297
sS'trials.thisIndex'
p364
g36
(g38
S'\x17\x00\x00\x00'
tRp365
sS'trials.thisRepN'
p366
I2
sS'trials.thisN'
p367
I54
sg30
g42
sg31
I1
sg29
F0.5
sS'trials.thisTrialN'
p368
I6
sg15
I1
sg18
g19
sa(dp369
g14
F0.47297120094299316
sS'trials.thisIndex'
p370
g36
(g38
S'\x06\x00\x00\x00'
tRp371
sS'trials.thisRepN'
p372
I2
sS'trials.thisN'
p373
I55
sg30
g42
sg31
I-1
sg29
I0
sS'trials.thisTrialN'
p374
I7
sg15
I1
sg18
g19
sa(dp375
g14
F0.42914700508117676
sS'trials.thisIndex'
p376
g36
(g38
S'\x04\x00\x00\x00'
tRp377
sS'trials.thisRepN'
p378
I2
sS'trials.thisN'
p379
I56
sg30
g49
sg31
I-1
sg29
F0.40000000000000002
sS'trials.thisTrialN'
p380
I8
sg15
I1
sg18
g19
sa(dp381
g14
F0.49300909042358398
sS'trials.thisIndex'
p382
g36
(g38
S'\x0c\x00\x00\x00'
tRp383
sS'trials.thisRepN'
p384
I2
sS'trials.thisN'
p385
I57
sg30
g49
sg31
I1
sg29
I0
sS'trials.thisTrialN'
p386
I9
sg15
I1
sg18
g19
sa(dp387
g14
F0.34097909927368164
sS'trials.thisIndex'
p388
g36
(g38
S'\x05\x00\x00\x00'
tRp389
sS'trials.thisRepN'
p390
I2
sS'trials.thisN'
p391
I58
sg30
g49
sg31
I-1
sg29
F0.5
sS'trials.thisTrialN'
p392
I10
sg15
I1
sg18
g19
sa(dp393
g14
F0.35153698921203613
sS'trials.thisIndex'
p394
g36
(g38
S'\x0e\x00\x00\x00'
tRp395
sS'trials.thisRepN'
p396
I2
sS'trials.thisN'
p397
I59
sg30
g49
sg31
I1
sg29
F0.20000000000000001
sS'trials.thisTrialN'
p398
I11
sg15
I1
sg18
g19
sa(dp399
g14
F0.38925695419311523
sS'trials.thisIndex'
p400
g36
(g38
S'\x0b\x00\x00\x00'
tRp401
sS'trials.thisRepN'
p402
I2
sS'trials.thisN'
p403
I60
sg30
g42
sg31
I-1
sg29
F0.5
sS'trials.thisTrialN'
p404
I12
sg15
I1
sg18
g19
sa(dp405
g14
F0.41411399841308594
sS'trials.thisIndex'
p406
g36
(g38
S'\x14\x00\x00\x00'
tRp407
sS'trials.thisRepN'
p408
I2
sS'trials.thisN'
p409
I61
sg30
g42
sg31
I1
sg29
F0.20000000000000001
sS'trials.thisTrialN'
p410
I13
sg15
I1
sg18
g19
sa(dp411
g14
F0.40508818626403809
sS'trials.thisIndex'
p412
g36
(g38
S'\x00\x00\x00\x00'
tRp413
sS'trials.thisRepN'
p414
I2
sS'trials.thisN'
p415
I62
sg30
g49
sg31
I-1
sg29
I0
sS'trials.thisTrialN'
p416
I14
sg15
I1
sg18
g19
sa(dp417
g14
F0.43248581886291504
sS'trials.thisIndex'
p418
g36
(g38
S'\r\x00\x00\x00'
tRp419
sS'trials.thisRepN'
p420
I2
sS'trials.thisN'
p421
I63
sg30
g49
sg31
I1
sg29
F0.10000000000000001
sS'trials.thisTrialN'
p422
I15
sg15
I1
sg18
g19
sa(dp423
g14
F0.41293597221374512
sS'trials.thisIndex'
p424
g36
(g38
S'\x01\x00\x00\x00'
tRp425
sS'trials.thisRepN'
p426
I2
sS'trials.thisN'
p427
I64
sg30
g49
sg31
I-1
sg29
F0.10000000000000001
sS'trials.thisTrialN'
p428
I16
sg15
I1
sg18
g19
sa(dp429
g14
F0.35242700576782227
sS'trials.thisIndex'
p430
g36
(g38
S'\x0f\x00\x00\x00'
tRp431
sS'trials.thisRepN'
p432
I2
sS'trials.thisN'
p433
I65
sg30
g49
sg31
I1
sg29
F0.29999999999999999
sS'trials.thisTrialN'
p434
I17
sg15
I1
sg18
g19
sa(dp435
g14
F0.28363895416259766
sS'trials.thisIndex'
p436
g36
(g38
S'\x03\x00\x00\x00'
tRp437
sS'trials.thisRepN'
p438
I2
sS'trials.thisN'
p439
I66
sg30
g49
sg31
I-1
sg29
F0.29999999999999999
sS'trials.thisTrialN'
p440
I18
sg15
I0
sg18
g19
sa(dp441
g14
F0.36111712455749512
sS'trials.thisIndex'
p442
g36
(g38
S'\x10\x00\x00\x00'
tRp443
sS'trials.thisRepN'
p444
I2
sS'trials.thisN'
p445
I67
sg30
g49
sg31
I1
sg29
F0.40000000000000002
sS'trials.thisTrialN'
p446
I19
sg15
I1
sg18
g19
sa(dp447
g14
F0.37020301818847656
sS'trials.thisIndex'
p448
g36
(g38
S'\x02\x00\x00\x00'
tRp449
sS'trials.thisRepN'
p450
I2
sS'trials.thisN'
p451
I68
sg30
g49
sg31
I-1
sg29
F0.20000000000000001
sS'trials.thisTrialN'
p452
I20
sg15
I1
sg18
g19
sa(dp453
g14
F0.42816996574401855
sS'trials.thisIndex'
p454
g36
(g38
S'\n\x00\x00\x00'
tRp455
sS'trials.thisRepN'
p456
I2
sS'trials.thisN'
p457
I69
sg30
g42
sg31
I-1
sg29
F0.40000000000000002
sS'trials.thisTrialN'
p458
I21
sg15
I1
sg18
g19
sa(dp459
g14
F0.77087783813476562
sS'trials.thisIndex'
p460
g36
(g38
S'\x16\x00\x00\x00'
tRp461
sS'trials.thisRepN'
p462
I2
sS'trials.thisN'
p463
I70
sg30
g42
sg31
I1
sg29
F0.40000000000000002
sS'trials.thisTrialN'
p464
I22
sg15
I1
sg18
g19
sa(dp465
g14
F0.42028403282165527
sS'trials.thisIndex'
p466
g36
(g38
S'\x08\x00\x00\x00'
tRp467
sS'trials.thisRepN'
p468
I2
sS'trials.thisN'
p469
I71
sg30
g42
sg31
I-1
sg29
F0.20000000000000001
sS'trials.thisTrialN'
p470
I23
sg15
I1
sg18
g19
sa(dp471
g14
F0.38648796081542969
sS'trials.thisIndex'
p472
g36
(g38
S'\x16\x00\x00\x00'
tRp473
sS'trials.thisRepN'
p474
I3
sS'trials.thisN'
p475
I72
sg30
g42
sg31
I1
sg29
F0.40000000000000002
sS'trials.thisTrialN'
p476
I0
sg15
I1
sg18
g19
sa(dp477
g14
F0.39938998222351074
sS'trials.thisIndex'
p478
g36
(g38
S'\x17\x00\x00\x00'
tRp479
sS'trials.thisRepN'
p480
I3
sS'trials.thisN'
p481
I73
sg30
g42
sg31
I1
sg29
F0.5
sS'trials.thisTrialN'
p482
I1
sg15
I1
sg18
g19
sa(dp483
g14
F0.4482419490814209
sS'trials.thisIndex'
p484
g36
(g38
S'\x0c\x00\x00\x00'
tRp485
sS'trials.thisRepN'
p486
I3
sS'trials.thisN'
p487
I74
sg30
g49
sg31
I1
sg29
I0
sS'trials.thisTrialN'
p488
I2
sg15
I1
sg18
g19
sa(dp489
g14
F0.3900749683380127
sS'trials.thisIndex'
p490
g36
(g38
S'\x04\x00\x00\x00'
tRp491
sS'trials.thisRepN'
p492
I3
sS'trials.thisN'
p493
I75
sg30
g49
sg31
I-1
sg29
F0.40000000000000002
sS'trials.thisTrialN'
p494
I3
sg15
I1
sg18
g19
sa(dp495
g14
F0.46607494354248047
sS'trials.thisIndex'
p496
g36
(g38
S'\x07\x00\x00\x00'
tRp497
sS'trials.thisRepN'
p498
I3
sS'trials.thisN'
p499
I76
sg30
g42
sg31
I-1
sg29
F0.10000000000000001
sS'trials.thisTrialN'
p500
I4
sg15
I1
sg18
g19
sa(dp501
g14
F0.39663290977478027
sS'trials.thisIndex'
p502
g36
(g38
S'\x15\x00\x00\x00'
tRp503
sS'trials.thisRepN'
p504
I3
sS'trials.thisN'
p505
I77
sg30
g42
sg31
I1
sg29
F0.29999999999999999
sS'trials.thisTrialN'
p506
I5
sg15
I1
sg18
g19
sa(dp507
g14
F0.44036698341369629
sS'trials.thisIndex'
p508
g36
(g38
S'\x01\x00\x00\x00'
tRp509
sS'trials.thisRepN'
p510
I3
sS'trials.thisN'
p511
I78
sg30
g49
sg31
I-1
sg29
F0.10000000000000001
sS'trials.thisTrialN'
p512
I6
sg15
I1
sg18
g19
sa(dp513
g14
F0.36339592933654785
sS'trials.thisIndex'
p514
g36
(g38
S'\x13\x00\x00\x00'
tRp515
sS'trials.thisRepN'
p516
I3
sS'trials.thisN'
p517
I79
sg30
g42
sg31
I1
sg29
F0.10000000000000001
sS'trials.thisTrialN'
p518
I7
sg15
I1
sg18
g19
sa(dp519
g14
F0.46046304702758789
sS'trials.thisIndex'
p520
g36
(g38
S'\n\x00\x00\x00'
tRp521
sS'trials.thisRepN'
p522
I3
sS'trials.thisN'
p523
I80
sg30
g42
sg31
I-1
sg29
F0.40000000000000002
sS'trials.thisTrialN'
p524
I8
sg15
I1
sg18
g19
sa(dp525
g14
F0.3229060173034668
sS'trials.thisIndex'
p526
g36
(g38
S'\x08\x00\x00\x00'
tRp527
sS'trials.thisRepN'
p528
I3
sS'trials.thisN'
p529
I81
sg30
g42
sg31
I-1
sg29
F0.20000000000000001
sS'trials.thisTrialN'
p530
I9
sg15
I1
sg18
g19
sa(dp531
g14
F0.49780702590942383
sS'trials.thisIndex'
p532
g36
(g38
S'\x11\x00\x00\x00'
tRp533
sS'trials.thisRepN'
p534
I3
sS'trials.thisN'
p535
I82
sg30
g49
sg31
I1
sg29
F0.5
sS'trials.thisTrialN'
p536
I10
sg15
I1
sg18
g19
sa(dp537
g14
F0.3657069206237793
sS'trials.thisIndex'
p538
g36
(g38
S'\x02\x00\x00\x00'
tRp539
sS'trials.thisRepN'
p540
I3
sS'trials.thisN'
p541
I83
sg30
g49
sg31
I-1
sg29
F0.20000000000000001
sS'trials.thisTrialN'
p542
I11
sg15
I1
sg18
g19
sa(dp543
g14
F0.3561248779296875
sS'trials.thisIndex'
p544
g36
(g38
S'\x0b\x00\x00\x00'
tRp545
sS'trials.thisRepN'
p546
I3
sS'trials.thisN'
p547
I84
sg30
g42
sg31
I-1
sg29
F0.5
sS'trials.thisTrialN'
p548
I12
sg15
I0
sg18
g19
sa(dp549
g14
F0.37241888046264648
sS'trials.thisIndex'
p550
g36
(g38
S'\x14\x00\x00\x00'
tRp551
sS'trials.thisRepN'
p552
I3
sS'trials.thisN'
p553
I85
sg30
g42
sg31
I1
sg29
F0.20000000000000001
sS'trials.thisTrialN'
p554
I13
sg15
I1
sg18
g19
sa(dp555
g14
F0.53471708297729492
sS'trials.thisIndex'
p556
g36
(g38
S'\x12\x00\x00\x00'
tRp557
sS'trials.thisRepN'
p558
I3
sS'trials.thisN'
p559
I86
sg30
g42
sg31
I1
sg29
I0
sS'trials.thisTrialN'
p560
I14
sg15
I1
sg18
g19
sa(dp561
g14
F0.43753910064697266
sS'trials.thisIndex'
p562
g36
(g38
S'\r\x00\x00\x00'
tRp563
sS'trials.thisRepN'
p564
I3
sS'trials.thisN'
p565
I87
sg30
g49
sg31
I1
sg29
F0.10000000000000001
sS'trials.thisTrialN'
p566
I15
sg15
I0
sg18
g19
sa(dp567
g14
F0.35175418853759766
sS'trials.thisIndex'
p568
g36
(g38
S'\x03\x00\x00\x00'
tRp569
sS'trials.thisRepN'
p570
I3
sS'trials.thisN'
p571
I88
sg30
g49
sg31
I-1
sg29
F0.29999999999999999
sS'trials.thisTrialN'
p572
I16
sg15
I1
sg18
g19
sa(dp573
g14
F0.52974200248718262
sS'trials.thisIndex'
p574
g36
(g38
S'\x06\x00\x00\x00'
tRp575
sS'trials.thisRepN'
p576
I3
sS'trials.thisN'
p577
I89
sg30
g42
sg31
I-1
sg29
I0
sS'trials.thisTrialN'
p578
I17
sg15
I1
sg18
g19
sa(dp579
g14
F0.3841850757598877
sS'trials.thisIndex'
p580
g36
(g38
S'\x0f\x00\x00\x00'
tRp581
sS'trials.thisRepN'
p582
I3
sS'trials.thisN'
p583
I90
sg30
g49
sg31
I1
sg29
F0.29999999999999999
sS'trials.thisTrialN'
p584
I18
sg15
I1
sg18
g19
sa(dp585
g14
F0.38121795654296875
sS'trials.thisIndex'
p586
g36
(g38
S'\x05\x00\x00\x00'
tRp587
sS'trials.thisRepN'
p588
I3
sS'trials.thisN'
p589
I91
sg30
g49
sg31
I-1
sg29
F0.5
sS'trials.thisTrialN'
p590
I19
sg15
I1
sg18
g19
sa(dp591
g14
F0.42204999923706055
sS'trials.thisIndex'
p592
g36
(g38
S'\x10\x00\x00\x00'
tRp593
sS'trials.thisRepN'
p594
I3
sS'trials.thisN'
p595
I92
sg30
g49
sg31
I1
sg29
F0.40000000000000002
sS'trials.thisTrialN'
p596
I20
sg15
I1
sg18
g19
sa(dp597
g14
F0.61284995079040527
sS'trials.thisIndex'
p598
g36
(g38
S'\x00\x00\x00\x00'
tRp599
sS'trials.thisRepN'
p600
I3
sS'trials.thisN'
p601
I93
sg30
g49
sg31
I-1
sg29
I0
sS'trials.thisTrialN'
p602
I21
sg15
I1
sg18
g19
sa(dp603
g14
F0.38069891929626465
sS'trials.thisIndex'
p604
g36
(g38
S'\x0e\x00\x00\x00'
tRp605
sS'trials.thisRepN'
p606
I3
sS'trials.thisN'
p607
I94
sg30
g49
sg31
I1
sg29
F0.20000000000000001
sS'trials.thisTrialN'
p608
I22
sg15
I1
sg18
g19
sa(dp609
g14
F0.45803689956665039
sS'trials.thisIndex'
p610
g36
(g38
S'\t\x00\x00\x00'
tRp611
sS'trials.thisRepN'
p612
I3
sS'trials.thisN'
p613
I95
sg30
g42
sg31
I-1
sg29
F0.29999999999999999
sS'trials.thisTrialN'
p614
I23
sg15
I1
sg18
g19
sa(dp615
g14
F0.48398995399475098
sS'trials.thisIndex'
p616
g36
(g38
S'\x0f\x00\x00\x00'
tRp617
sS'trials.thisRepN'
p618
I4
sS'trials.thisN'
p619
I96
sg30
g49
sg31
I1
sg29
F0.29999999999999999
sS'trials.thisTrialN'
p620
I0
sg15
I1
sg18
g19
sa(dp621
g14
F0.45263004302978516
sS'trials.thisIndex'
p622
g36
(g38
S'\x0b\x00\x00\x00'
tRp623
sS'trials.thisRepN'
p624
I4
sS'trials.thisN'
p625
I97
sg30
g42
sg31
I-1
sg29
F0.5
sS'trials.thisTrialN'
p626
I1
sg15
I1
sg18
g19
sa(dp627
g14
F0.42169690132141113
sS'trials.thisIndex'
p628
g36
(g38
S'\x17\x00\x00\x00'
tRp629
sS'trials.thisRepN'
p630
I4
sS'trials.thisN'
p631
I98
sg30
g42
sg31
I1
sg29
F0.5
sS'trials.thisTrialN'
p632
I2
sg15
I0
sg18
g19
sa(dp633
g14
F0.68188190460205078
sS'trials.thisIndex'
p634
g36
(g38
S'\x07\x00\x00\x00'
tRp635
sS'trials.thisRepN'
p636
I4
sS'trials.thisN'
p637
I99
sg30
g42
sg31
I-1
sg29
F0.10000000000000001
sS'trials.thisTrialN'
p638
I3
sg15
I1
sg18
g19
sa(dp639
g14
F0.45407915115356445
sS'trials.thisIndex'
p640
g36
(g38
S'\x0e\x00\x00\x00'
tRp641
sS'trials.thisRepN'
p642
I4
sS'trials.thisN'
p643
I100
sg30
g49
sg31
I1
sg29
F0.20000000000000001
sS'trials.thisTrialN'
p644
I4
sg15
I1
sg18
g19
sa(dp645
g14
F0.46870517730712891
sS'trials.thisIndex'
p646
g36
(g38
S'\x10\x00\x00\x00'
tRp647
sS'trials.thisRepN'
p648
I4
sS'trials.thisN'
p649
I101
sg30
g49
sg31
I1
sg29
F0.40000000000000002
sS'trials.thisTrialN'
p650
I5
sg15
I1
sg18
g19
sa(dp651
g14
F0.56962704658508301
sS'trials.thisIndex'
p652
g36
(g38
S'\x00\x00\x00\x00'
tRp653
sS'trials.thisRepN'
p654
I4
sS'trials.thisN'
p655
I102
sg30
g49
sg31
I-1
sg29
I0
sS'trials.thisTrialN'
p656
I6
sg15
I1
sg18
g19
sa(dp657
g14
F0.57459807395935059
sS'trials.thisIndex'
p658
g36
(g38
S'\t\x00\x00\x00'
tRp659
sS'trials.thisRepN'
p660
I4
sS'trials.thisN'
p661
I103
sg30
g42
sg31
I-1
sg29
F0.29999999999999999
sS'trials.thisTrialN'
p662
I7
sg15
I1
sg18
g19
sa(dp663
g14
F0.52745914459228516
sS'trials.thisIndex'
p664
g36
(g38
S'\x06\x00\x00\x00'
tRp665
sS'trials.thisRepN'
p666
I4
sS'trials.thisN'
p667
I104
sg30
g42
sg31
I-1
sg29
I0
sS'trials.thisTrialN'
p668
I8
sg15
I1
sg18
g19
sa(dp669
g14
F0.39377093315124512
sS'trials.thisIndex'
p670
g36
(g38
S'\x08\x00\x00\x00'
tRp671
sS'trials.thisRepN'
p672
I4
sS'trials.thisN'
p673
I105
sg30
g42
sg31
I-1
sg29
F0.20000000000000001
sS'trials.thisTrialN'
p674
I9
sg15
I1
sg18
g19
sa(dp675
g14
F0.50723385810852051
sS'trials.thisIndex'
p676
g36
(g38
S'\x0c\x00\x00\x00'
tRp677
sS'trials.thisRepN'
p678
I4
sS'trials.thisN'
p679
I106
sg30
g49
sg31
I1
sg29
I0
sS'trials.thisTrialN'
p680
I10
sg15
I1
sg18
g19
sa(dp681
g14
F0.37876391410827637
sS'trials.thisIndex'
p682
g36
(g38
S'\x11\x00\x00\x00'
tRp683
sS'trials.thisRepN'
p684
I4
sS'trials.thisN'
p685
I107
sg30
g49
sg31
I1
sg29
F0.5
sS'trials.thisTrialN'
p686
I11
sg15
I1
sg18
g19
sa(dp687
g14
F0.47202610969543457
sS'trials.thisIndex'
p688
g36
(g38
S'\x03\x00\x00\x00'
tRp689
sS'trials.thisRepN'
p690
I4
sS'trials.thisN'
p691
I108
sg30
g49
sg31
I-1
sg29
F0.29999999999999999
sS'trials.thisTrialN'
p692
I12
sg15
I1
sg18
g19
sa(dp693
g14
F0.67717313766479492
sS'trials.thisIndex'
p694
g36
(g38
S'\x12\x00\x00\x00'
tRp695
sS'trials.thisRepN'
p696
I4
sS'trials.thisN'
p697
I109
sg30
g42
sg31
I1
sg29
I0
sS'trials.thisTrialN'
p698
I13
sg15
I1
sg18
g19
sa(dp699
g14
F0.42999696731567383
sS'trials.thisIndex'
p700
g36
(g38
S'\r\x00\x00\x00'
tRp701
sS'trials.thisRepN'
p702
I4
sS'trials.thisN'
p703
I110
sg30
g49
sg31
I1
sg29
F0.10000000000000001
sS'trials.thisTrialN'
p704
I14
sg15
I1
sg18
g19
sa(dp705
g14
F0.6613161563873291
sS'trials.thisIndex'
p706
g36
(g38
S'\x14\x00\x00\x00'
tRp707
sS'trials.thisRepN'
p708
I4
sS'trials.thisN'
p709
I111
sg30
g42
sg31
I1
sg29
F0.20000000000000001
sS'trials.thisTrialN'
p710
I15
sg15
I1
sg18
g19
sa(dp711
g14
F0.53039789199829102
sS'trials.thisIndex'
p712
g36
(g38
S'\x16\x00\x00\x00'
tRp713
sS'trials.thisRepN'
p714
I4
sS'trials.thisN'
p715
I112
sg30
g42
sg31
I1
sg29
F0.40000000000000002
sS'trials.thisTrialN'
p716
I16
sg15
I1
sg18
g19
sa(dp717
g14
F0.44604301452636719
sS'trials.thisIndex'
p718
g36
(g38
S'\x04\x00\x00\x00'
tRp719
sS'trials.thisRepN'
p720
I4
sS'trials.thisN'
p721
I113
sg30
g49
sg31
I-1
sg29
F0.40000000000000002
sS'trials.thisTrialN'
p722
I17
sg15
I1
sg18
g19
sa(dp723
g14
F0.54396986961364746
sS'trials.thisIndex'
p724
g36
(g38
S'\x13\x00\x00\x00'
tRp725
sS'trials.thisRepN'
p726
I4
sS'trials.thisN'
p727
I114
sg30
g42
sg31
I1
sg29
F0.10000000000000001
sS'trials.thisTrialN'
p728
I18
sg15
I1
sg18
g19
sa(dp729
g14
F0.52478408813476562
sS'trials.thisIndex'
p730
g36
(g38
S'\x01\x00\x00\x00'
tRp731
sS'trials.thisRepN'
p732
I4
sS'trials.thisN'
p733
I115
sg30
g49
sg31
I-1
sg29
F0.10000000000000001
sS'trials.thisTrialN'
p734
I19
sg15
I1
sg18
g19
sa(dp735
g14
F0.4216160774230957
sS'trials.thisIndex'
p736
g36
(g38
S'\x05\x00\x00\x00'
tRp737
sS'trials.thisRepN'
p738
I4
sS'trials.thisN'
p739
I116
sg30
g49
sg31
I-1
sg29
F0.5
sS'trials.thisTrialN'
p740
I20
sg15
I1
sg18
g19
sa(dp741
g14
F0.4210970401763916
sS'trials.thisIndex'
p742
g36
(g38
S'\x02\x00\x00\x00'
tRp743
sS'trials.thisRepN'
p744
I4
sS'trials.thisN'
p745
I117
sg30
g49
sg31
I-1
sg29
F0.20000000000000001
sS'trials.thisTrialN'
p746
I21
sg15
I0
sg18
g19
sa(dp747
g14
F0.427947998046875
sS'trials.thisIndex'
p748
g36
(g38
S'\n\x00\x00\x00'
tRp749
sS'trials.thisRepN'
p750
I4
sS'trials.thisN'
p751
I118
sg30
g42
sg31
I-1
sg29
F0.40000000000000002
sS'trials.thisTrialN'
p752
I22
sg15
I1
sg18
g19
sa(dp753
g14
F0.4783928394317627
sS'trials.thisIndex'
p754
g36
(g38
S'\x15\x00\x00\x00'
tRp755
sS'trials.thisRepN'
p756
I4
sS'trials.thisN'
p757
I119
sg30
g42
sg31
I1
sg29
F0.29999999999999999
sS'trials.thisTrialN'
p758
I23
sg15
I1
sg18
g19
sasS'loops'
p759
(lp760
g1
(cpsychopy.data
TrialHandler
p761
g3
NtRp762
(dp763
S'origin'
p764
V# -*- coding: utf-8 -*-\u000a"""Routines for handling data structures and analysis"""\u000a# Part of the PsychoPy library\u000a# Copyright (C) 2012 Jonathan Peirce\u000a# Distributed under the terms of the GNU General Public License (GPL).\u000a\u000afrom psychopy import misc, gui, logging\u000aimport psychopy\u000aimport cPickle, string, sys, platform, os, time, copy, csv\u000aimport numpy\u000afrom scipy import optimize, special\u000afrom matplotlib import mlab    #used for importing csv files\u000afrom contrib.quest import *    #used for QuestHandler\u000aimport inspect #so that Handlers can find the script that called them\u000aimport codecs, locale\u000aimport weakref\u000aimport re\u000a\u000atry:\u000a    import openpyxl\u000a    from openpyxl.cell import get_column_letter\u000a    from openpyxl.reader.excel import load_workbook\u000a    haveOpenpyxl=True\u000aexcept:\u000a    haveOpenpyxl=False\u000a\u000a_experiments=weakref.WeakValueDictionary()\u000a_nonalphanumeric_re = re.compile(r'\u005cW') # will match all bad var name chars\u000a\u000aclass ExperimentHandler(object):\u000a    """A container class for keeping track of multiple loops/handlers\u000a\u000a    Useful for generating a single data file from an experiment with many\u000a    different loops (e.g. interleaved staircases or loops within loops\u000a\u000a    :usage:\u000a\u000a        exp = data.ExperimentHandler(name="Face Preference",version='0.1.0')\u000a\u000a    """\u000a    def __init__(self,\u000a                name='',\u000a                version='',\u000a                extraInfo=None,\u000a                runtimeInfo=None,\u000a                originPath=None,\u000a                savePickle=True,\u000a                saveWideText=True,\u000a                dataFileName=''):\u000a        """\u000a        :parameters:\u000a\u000a            name : a string or unicode\u000a                As a useful identifier later\u000a\u000a            version : usually a string (e.g. '1.1.0')\u000a                To keep track of which version of the experiment was run\u000a\u000a            extraInfo : a dictionary\u000a                Containing useful information about this run\u000a                (e.g. {'participant':'jwp','gender':'m','orientation':90} )\u000a\u000a            runtimeInfo : :class:`psychopy.info.RunTimeInfo`\u000a                Containining information about the system as detected at runtime\u000a\u000a            originPath : string or unicode\u000a                The path and filename of the originating script/experiment\u000a                If not provided this will be determined as the path of the\u000a                calling script.\u000a\u000a            dataFilename : string\u000a                This is defined in advance and the file will be saved at any\u000a                point that the handler is removed or discarded (unless .abort()\u000a                had been called in advance).\u000a                The handler will attempt to populate the file even in the\u000a                event of a (not too serious) crash!\u000a\u000a        """\u000a        self.loops=[]\u000a        self.loopsUnfinished=[]\u000a        self.name=name\u000a        self.version=version\u000a        self.runtimeInfo=runtimeInfo\u000a        if extraInfo==None:\u000a            self.extraInfo = {}\u000a        else:\u000a            self.extraInfo=extraInfo\u000a        self.originPath=originPath\u000a        self.savePickle=savePickle\u000a        self.saveWideText=saveWideText\u000a        self.dataFileName=dataFileName\u000a        self.thisEntry = {}\u000a        self.entries=[]#chronological list of entries\u000a        self._paramNamesSoFar=[]\u000a        self.dataNames=[]#names of all the data (eg. resp.keys)\u000a        if dataFileName in ['', None]:\u000a            logging.warning('ExperimentHandler created with no dataFileName parameter. No data will be saved in the event of a crash')\u000a    def __del__(self):\u000a        if self.dataFileName not in ['', None]:\u000a            logging.debug('Saving data for %s ExperimentHandler' %self.name)\u000a            if self.savePickle==True:\u000a                self.saveAsPickle(self.dataFileName)\u000a            if self.saveWideText==True:\u000a                self.saveAsWideText(self.dataFileName+'.csv', delim=',')\u000a    def addLoop(self, loopHandler):\u000a        """Add a loop such as a `~psychopy.data.TrialHandler` or `~psychopy.data.StairHandler`\u000a        Data from this loop will be included in the resulting data files.\u000a        """\u000a        self.loops.append(loopHandler)\u000a        self.loopsUnfinished.append(loopHandler)\u000a        #keep the loop updated that is now owned\u000a        loopHandler.setExp(self)\u000a    def loopEnded(self, loopHandler):\u000a        """Informs the experiment handler that the loop is finished and not to\u000a        include its values in further entries of the experiment.\u000a\u000a        This method is called by the loop itself if it ends its iterations,\u000a        so is not typically needed by the user.\u000a        """\u000a        if loopHandler in self.loopsUnfinished:\u000a            self.loopsUnfinished.remove(loopHandler)\u000a    def _getAllParamNames(self):\u000a        """Returns the attribute names of loop parameters (trialN etc)\u000a        that the current set of loops contain, ready to build a wide-format\u000a        data file.\u000a        """\u000a        names=copy.deepcopy(self._paramNamesSoFar)\u000a        #get names (or identifiers) for all contained loops\u000a        for thisLoop in self.loops:\u000a            theseNames, vals = self._getLoopInfo(thisLoop)\u000a            for name in theseNames:\u000a                if name not in names:\u000a                    names.append(name)\u000a        return names\u000a    def _getExtraInfo(self):\u000a        """\u000a        Get the names and vals from the extraInfo dict (if it exists)\u000a        """\u000a        if type(self.extraInfo) != dict:\u000a            names=[]\u000a            vals=[]\u000a        else:\u000a            names=self.extraInfo.keys()\u000a            vals= self.extraInfo.values()\u000a        return names, vals\u000a    def _getLoopInfo(self, loop):\u000a        """Returns the attribute names and values for the current trial of a particular loop.\u000a        Does not return data inputs from the subject, only info relating to the trial\u000a        execution.\u000a        """\u000a        names=[]\u000a        vals=[]\u000a        name = loop.name\u000a        #standard attributes\u000a        for attr in ['thisRepN', 'thisTrialN', 'thisN','thisIndex', 'stepSizeCurrent']:\u000a            if hasattr(loop, attr):\u000a                if attr=='stepSizeCurrent':\u000a                    attrName=name+'.stepSize'\u000a                else:\u000a                    attrName = name+'.'+attr\u000a                #append the attribute name and the current value\u000a                names.append(attrName)\u000a                vals.append(getattr(loop,attr))\u000a\u000a        if hasattr(loop, 'thisTrial'):\u000a            trial = loop.thisTrial\u000a            if hasattr(trial,'items'):#is a TrialList object or a simple dict\u000a                for attr,val in trial.items():\u000a                    if attr not in self._paramNamesSoFar: self._paramNamesSoFar.append(attr)\u000a                    names.append(attr)\u000a                    vals.append(val)\u000a            elif trial==[]:#we haven't had 1st trial yet? Not actually sure why this occasionally happens (JWP)\u000a                pass\u000a            else:\u000a                names.append(name+'.thisTrial')\u000a                vals.append(trial)\u000a        elif hasattr(loop, 'intensities'):\u000a            names.append(name+'.intensity')\u000a            if len(loop.intensities)>0:\u000a                vals.append(loop.intensities[-1])\u000a            else:\u000a                vals.append(None)\u000a\u000a        return names, vals\u000a    def addData(self, name, value):\u000a        """Add the data with a given name to the current experiment.\u000a\u000a        Typically the user does not need to use this function; if you added\u000a        your data to the loop and had already added the loop to the\u000a        experiment then the loop will automatically inform the experiment\u000a        that it has received data.\u000a\u000a        Multiple data name/value pairs can be added to any given entry of\u000a        the data file and is considered part of the same entry until the\u000a        nextEntry() call is made.\u000a\u000a        e.g.::\u000a\u000a            #add some data for this trial\u000a            exp.addData('resp.rt', 0.8)\u000a            exp.addData('resp.key', 'k')\u000a            #end of trial - move to next line in data output\u000a            exp.nextEntry()\u000a        """\u000a        if name not in self.dataNames:\u000a            self.dataNames.append(name)\u000a        self.thisEntry[name]=value\u000a\u000a    def nextEntry(self):\u000a        """Calling nextEntry indicates to the ExperimentHandler that the\u000a        current trial has ended and so further\u000a        addData() calls correspond to the next trial.\u000a        """\u000a        this=self.thisEntry\u000a        #fetch data from each (potentially-nested) loop\u000a        for thisLoop in self.loopsUnfinished:\u000a            names, vals = self._getLoopInfo(thisLoop)\u000a            for n, name in enumerate(names):\u000a                this[name]=vals[n]\u000a        #add the extraInfo dict to the data\u000a        if type(self.extraInfo)==dict:\u000a            this.update(self.extraInfo)#NB update() really means mergeFrom()\u000a        self.entries.append(this)\u000a        #then create new empty entry for n\u000a        self.thisEntry = {}\u000a    def saveAsWideText(self, fileName, delim=None,\u000a                   matrixOnly=False,\u000a                   appendFile=False):\u000a        """Saves a long, wide-format text file, with one line representing the attributes and data\u000a        for a single trial. Suitable for analysis in R and SPSS.\u000a\u000a        If `appendFile=True` then the data will be added to the bottom of an existing file. Otherwise, if the file exists\u000a        already it will be overwritten\u000a\u000a        If `matrixOnly=True` then the file will not contain a header row, which can be handy if you want to append data\u000a        to an existing file of the same format.\u000a        """\u000a\u000a        #create the file or print to stdout\u000a        if appendFile: writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if os.path.exists(fileName) and writeFormat == 'w':\u000a            logging.warning('Data file, %s, will be overwritten' %fileName)\u000a\u000a        if fileName[-4:] in ['.csv', '.CSV']:\u000a            delim=','\u000a        else:\u000a            delim='\u005ct'\u000a\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.csv', '.CSV','.dlm','.DLM', '.tsv','.TSV']:\u000a            f= codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',':\u000a                f= codecs.open(fileName+'.csv',writeFormat, encoding = "utf-8")\u000a            else:\u000a                f=codecs.open(fileName+'.dlm',writeFormat, encoding = "utf-8")\u000a\u000a        names = self._getAllParamNames()\u000a        names.extend(self.dataNames)\u000a        names.extend(self._getExtraInfo()[0]) #names from the extraInfo dictionary\u000a        #write a header line\u000a        if not matrixOnly:\u000a            for heading in names:\u000a                f.write(u'%s%s' %(heading,delim))\u000a            f.write('\u005cn')\u000a        #write the data for each entry\u000a        for entry in self.entries:\u000a            for name in names:\u000a                if name in entry.keys():\u000a                    if ',' in unicode(entry[name]):\u000a                        f.write(u'"%s"%s' %(entry[name],delim))\u000a                    else:\u000a                        f.write(u'%s%s' %(entry[name],delim))\u000a                else:\u000a                    f.write(delim)\u000a            f.write('\u005cn')\u000a        f.close()\u000a        self.saveWideText=False\u000a    def saveAsPickle(self,fileName, fileCollisionMethod = 'rename'):\u000a        """Basically just saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded if necessary and further analyses carried out.\u000a\u000a        :Parameters:\u000a\u000a            fileCollisionMethod: Collision method passed to ~psychopy.misc._handleFileCollision\u000a        """\u000a        #otherwise use default location\u000a        if not fileName.endswith('.psydat'):\u000a            fileName+='.psydat'\u000a        if os.path.exists(fileName):\u000a            fileName = misc._handleFileCollision(fileName, fileCollisionMethod)\u000a\u000a        #create the file or print to stdout\u000a        f = open(fileName, 'wb')\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        #no need to save again\u000a        self.savePickle=False\u000a\u000a    def abort(self):\u000a        """Inform the ExperimentHandler that the run was aborted.\u000a\u000a        Experiment handler will attempt automatically to save data (even in the event of a crash if possible).\u000a        So if you quit your script early you may want to tell the Handler not to save out the data files for this run.\u000a        This is the method that allows you to do that.\u000a        """\u000a        self.savePickle=False\u000a        self.saveWideText=False\u000a\u000aclass TrialType(dict):\u000a    """This is just like a dict, except that you can access keys with obj.key\u000a    """\u000a    def __getattribute__(self, name):\u000a        try:#to get attr from dict in normal way (passing self)\u000a            return dict.__getattribute__(self, name)\u000a        except AttributeError:\u000a            try:\u000a                return self[name]\u000a            except KeyError:\u000a                raise AttributeError, ('TrialType has no attribute (or key) \u005c'%s\u005c'' %(name))\u000a\u000aclass _BaseTrialHandler(object):\u000a    def setExp(self, exp):\u000a        """Sets the ExperimentHandler that this handler is attached to\u000a\u000a        Do NOT attempt to set the experiment using::\u000a\u000a            trials._exp = myExperiment\u000a\u000a        because it needs to be performed using the `weakref` module.\u000a        """\u000a        #need to use a weakref to avoid creating a circular reference that\u000a        #prevents effective object deletion\u000a        expId=id(exp)\u000a        _experiments[expId] = exp\u000a        self._exp = expId\u000a    def getExp(self):\u000a        """Return the ExperimentHandler that this handler is attached to, if any.\u000a        Returns None if not attached\u000a        """\u000a        if self._exp==None or self._exp not in _experiments:\u000a            return None\u000a        else:\u000a            return _experiments[self._exp]\u000a    def _terminate(self):\u000a        """Remove references to ourself in experiments and terminate the loop\u000a        """\u000a        #remove ourself from the list of unfinished loops in the experiment\u000a        exp=self.getExp()\u000a        if exp!=None:\u000a            exp.loopEnded(self)\u000a        #and halt the loop\u000a        raise StopIteration\u000a    def saveAsPickle(self,fileName, fileCollisionMethod = 'rename'):\u000a        """Basically just saves a copy of the handler (with data) to a pickle file.\u000a\u000a        This can be reloaded if necessesary and further analyses carried out.\u000a\u000a        :Parameters:\u000a\u000a            fileCollisionMethod: Collision method passed to ~psychopy.misc._handleFileCollision\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            logging.info('.saveAsPickle() called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        if not fileName.endswith('.psydat'):\u000a            fileName+='.psydat'\u000a        if os.path.exists(fileName):\u000a            fileName = misc._handleFileCollision(fileName, fileCollisionMethod)\u000a\u000a        #create the file or print to stdout\u000a        f = open(fileName, 'wb')\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a    def saveAsText(self,fileName,\u000a                   stimOut=[],\u000a                   dataOut=('n','all_mean','all_std', 'all_raw'),\u000a                   delim=None,\u000a                   matrixOnly=False,\u000a                   appendFile=True,\u000a                   summarised=True,\u000a                   ):\u000a        """\u000a        Write a text file with the data and various chosen stimulus attributes\u000a\u000a         :Parameters:\u000a\u000a            fileName:\u000a                will have .dlm appended (so you can double-click it to\u000a                open in excel) and can include path info.\u000a\u000a            stimOut:\u000a                the stimulus attributes to be output. To use this you need to\u000a                use a list of dictionaries and give here the names of dictionary keys\u000a                that you want as strings\u000a\u000a            dataOut:\u000a                a list of strings specifying the dataType and the analysis to\u000a                be performed,in the form `dataType_analysis`. The data can be any of the types that\u000a                you added using trialHandler.data.add() and the analysis can be either\u000a                'raw' or most things in the numpy library, including;\u000a                'mean','std','median','max','min'...\u000a                The default values will output the raw, mean and std of all datatypes found\u000a\u000a            delim:\u000a                allows the user to use a delimiter other than tab ("," is popular with file extension ".csv")\u000a\u000a            matrixOnly:\u000a                outputs the data with no header row or extraInfo attached\u000a\u000a            appendFile:\u000a                will add this output to the end of the specified file if it already exists\u000a\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            logging.info('TrialHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        dataArray = self._createOutputArray(stimOut=[],\u000a            dataOut=dataOut,\u000a            matrixOnly=False,)\u000a\u000a        #set default delimiter if none given\u000a        if delim==None:\u000a            if fileName[-4:] in ['.csv','.CSV']:\u000a                delim=','\u000a            else:\u000a                delim='\u005ct'\u000a\u000a        #create the file or print to stdout\u000a        if appendFile: writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.csv', '.CSV']:\u000a            f= codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',':\u000a                f= codecs.open(fileName+'.csv',writeFormat, encoding = "utf-8")\u000a            else:\u000a                f=codecs.open(fileName+'.dlm',writeFormat, encoding = "utf-8")\u000a\u000a        #loop through lines in the data matrix\u000a        for line in dataArray:\u000a            for cellN, entry in enumerate(line):\u000a                if delim in unicode(entry):#surround in quotes to prevent effect of delimiter\u000a                    f.write(u'"%s"' %unicode(entry))\u000a                else:\u000a                    f.write(unicode(entry))\u000a                if cellN<(len(line)-1):\u000a                    f.write(delim)\u000a            f.write("\u005cn")#add an EOL at end of each line\u000a        if f != sys.stdout:\u000a            f.close()\u000a            logging.info('saved data to %s' %f.name)\u000a    def printAsText(self, stimOut=[],\u000a                    dataOut=('all_mean', 'all_std', 'all_raw'),\u000a                    delim='\u005ct',\u000a                    matrixOnly=False,\u000a                  ):\u000a        """Exactly like saveAsText() except that the output goes\u000a        to the screen instead of a file"""\u000a        self.saveAsText('stdout', stimOut, dataOut, delim, matrixOnly)\u000a\u000a    def saveAsExcel(self,fileName, sheetName='rawData',\u000a                    stimOut=[],\u000a                    dataOut=('n','all_mean','all_std', 'all_raw'),\u000a                    matrixOnly=False,\u000a                    appendFile=True,\u000a                    ):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that data can be stored in multiple named sheets within the file. So you could have a single file\u000a        named after your experiment and then have one worksheet for each participant. Or you could have\u000a        one file for each participant and then multiple sheets for repeated sessions etc.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            sheetName: string\u000a                the name of the worksheet within the file\u000a\u000a            stimOut: list of strings\u000a                the attributes of the trial characteristics to be output. To use this you need to have provided\u000a                a list of dictionaries specifying to trialList parameter of the TrialHandler\u000a                and give here the names of strings specifying entries in that dictionary\u000a\u000a            dataOut: list of strings\u000a                specifying the dataType and the analysis to\u000a                be performed, in the form `dataType_analysis`. The data can be any of the types that\u000a                you added using trialHandler.data.add() and the analysis can be either\u000a                'raw' or most things in the numpy library, including\u000a                'mean','std','median','max','min'. e.g. `rt_max` will give a column of max reaction\u000a                times across the trials assuming that `rt` values have been stored.\u000a                The default values will output the raw, mean and std of all datatypes found\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a\u000a        """\u000a\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            logging.info('TrialHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #NB this was based on the limited documentation (1 page wiki) for openpyxl v1.0\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for saving files in Excel (xlsx) format, but was not found.'\u000a            return -1\u000a\u000a        #create the data array to be sent to the Excel file\u000a        dataArray = self._createOutputArray(stimOut=[],\u000a            dataOut=dataOut,\u000a            matrixOnly=False,)\u000a\u000a        #import necessary subpackages - they are small so won't matter to do it here\u000a        from openpyxl.workbook import Workbook\u000a        from openpyxl.writer.excel import ExcelWriter\u000a        from openpyxl.reader.excel import load_workbook\u000a\u000a        if not fileName.endswith('.xlsx'): fileName+='.xlsx'\u000a        #create or load the file\u000a        if appendFile and os.path.isfile(fileName):\u000a            wb = load_workbook(fileName)\u000a            newWorkbook=False\u000a        else:\u000a            if not appendFile: #the file exists but we're not appending, so will be overwritten\u000a                logging.warning('Data file, %s, will be overwritten' %fileName)\u000a            wb = Workbook()#create new workbook\u000a            wb.properties.creator='PsychoPy'+psychopy.__version__\u000a            newWorkbook=True\u000a\u000a        ew = ExcelWriter(workbook = wb)\u000a\u000a        if newWorkbook:\u000a            ws = wb.worksheets[0]\u000a            ws.title=sheetName\u000a        else:\u000a            ws=wb.create_sheet()\u000a            ws.title=sheetName\u000a\u000a        #loop through lines in the data matrix\u000a        for lineN, line in enumerate(dataArray):\u000a            if line==None:\u000a                continue\u000a            for colN, entry in enumerate(line):\u000a                if entry in [None]:\u000a                    entry=''\u000a                try:\u000a                    ws.cell(_getExcelCellName(col=colN,row=lineN)).value = float(entry)#if it can conver to a number (from numpy) then do it\u000a                except:\u000a                    ws.cell(_getExcelCellName(col=colN,row=lineN)).value = unicode(entry)#else treat as unicode\u000a\u000a        ew.save(filename = fileName)\u000a\u000a    def nextTrial(self):\u000a        """DEPRECATION WARNING: nextTrial() will be deprecated\u000a        please use next() instead.\u000a        jwp: 19/6/06\u000a        """\u000a        if self._warnUseOfNext:\u000a            logging.warning("""DEPRECATION WARNING: nextTrial() will be deprecated\u000a        please use next() instead.\u000a        jwp: 19/6/06\u000a        """)\u000a            self._warnUseOfNext=False\u000a        return self.next()\u000a    def getOriginPathAndFile(self, originPath=None):\u000a        """Attempts to determine the path of the script that created this data file\u000a        and returns both the path to that script and it's contents.\u000a        Useful to store the entire experiment with the data.\u000a\u000a        If originPath is provided (e.g. from Builder) then this is used otherwise\u000a        the calling script is the originPath (fine from a standard python script).\u000a        """\u000a        #self.originPath and self.origin (the contents of the origin file)\u000a        if originPath==None or not os.path.isfile(originPath):\u000a            try:\u000a                originPath = inspect.getouterframes(inspect.currentframe())[1][1]\u000a                logging.debug("Using %s as origin file" %originPath)\u000a            except:\u000a                logging.debug("Failed to find origin file using inspect.getouterframes")\u000a                return '',''\u000a        if os.path.isfile(originPath):#do we NOW have a path?\u000a            origin = codecs.open(originPath,"r", encoding = "utf-8").read()\u000a        else:\u000a            origin=None\u000a        return originPath, origin\u000a\u000aclass TrialHandler(_BaseTrialHandler):\u000a    """Class to handle trial sequencing and data storage.\u000a\u000a    Calls to .next() will fetch the next trial object given to this handler,\u000a    according to the method specified (random, sequential, fullRandom). Calls\u000a    will raise a StopIteration error if trials have finished.\u000a\u000a    See demo_trialHandler.py\u000a\u000a    The psydat file format is literally just a pickled copy of the TrialHandler object that\u000a    saved it. You can open it with::\u000a\u000a            from psychopy import misc\u000a            dat = misc.fromFile(path)\u000a\u000a    Then you'll find that `dat` has the following attributes that\u000a    """\u000a    def __init__(self,\u000a                 trialList,\u000a                 nReps,\u000a                 method='random',\u000a                 dataTypes=None,\u000a                 extraInfo=None,\u000a                 seed=None,\u000a                 originPath=None,\u000a                 name=''):\u000a        """\u000a\u000a        :Parameters:\u000a\u000a            trialList: a simple list (or flat array) of dictionaries specifying conditions\u000a                This can be imported from an excel/csv file using :func:`~psychopy.data.importConditions`\u000a\u000a            nReps: number of repeats for all conditions\u000a\u000a            method: *'random',* 'sequential', or 'fullRandom'\u000a                'sequential' obviously presents the conditions in the order they appear in the list.\u000a                'random' will result in a shuffle of the conditions on each repeat, but all conditions\u000a                occur once before the second repeat etc. 'fullRandom' fully randomises the\u000a                trials across repeats as well, which means you could potentially run all trials of\u000a                one condition before any trial of another.\u000a\u000a            dataTypes: (optional) list of names for data storage. e.g. ['corr','rt','resp']\u000a                If not provided then these will be created as needed during calls to\u000a                :func:`~psychopy.data.TrialHandler.addData`\u000a\u000a            extraInfo: A dictionary\u000a                This will be stored alongside the data and usually describes the experiment and\u000a                subject ID, date etc.\u000a\u000a            seed: an integer\u000a                If provided then this fixes the random number generator to use the same pattern\u000a                of trials, by seeding its startpoint\u000a\u000a            originPath: a string describing the location of the script/experiment file path\u000a                The psydat file format will store a copy of the experiment if possible. If no file path\u000a                is provided here then the TrialHandler will still store a copy of the script where it was\u000a                created\u000a\u000a        :Attributes (after creation):\u000a\u000a            .data - a dictionary of numpy arrays, one for each data type stored\u000a\u000a            .trialList - the original list of dicts, specifying the conditions\u000a\u000a            .thisIndex - the index of the current trial in the original conditions list\u000a\u000a            .nTotal - the total number of trials that will be run\u000a\u000a            .nRemaining - the total number of trials remaining\u000a\u000a            .thisN - total trials completed so far\u000a\u000a            .thisRepN - which repeat you are currently on\u000a\u000a            .thisTrialN - which trial number *within* that repeat\u000a\u000a            .thisTrial - a dictionary giving the parameters of the current trial\u000a\u000a            .finished - True/False for have we finished yet\u000a\u000a            .extraInfo - the dictionary of extra info as given at beginning\u000a\u000a            .origin - the contents of the script or builder experiment that created the handler\u000a\u000a        """\u000a        self.name=name\u000a        if trialList in [None, []]:#user wants an empty trialList\u000a            self.trialList = [None]#which corresponds to a list with a single empty entry\u000a        else:\u000a            self.trialList =trialList\u000a        #convert any entry in the TrialList into a TrialType object (with obj.key or obj[key] access)\u000a        for n, entry in enumerate(trialList):\u000a            if type(entry)==dict:\u000a                trialList[n]=TrialType(entry)\u000a        self.nReps = int(nReps)\u000a        self.nTotal = self.nReps*len(self.trialList)\u000a        self.nRemaining =self.nTotal #subtract 1 each trial\u000a        self.method = method\u000a        self.thisRepN = 0        #records which repetition or pass we are on\u000a        self.thisTrialN = -1    #records which trial number within this repetition\u000a        self.thisN = -1\u000a        self.thisIndex = 0        #the index of the current trial in the conditions list\u000a        self.thisTrial = []\u000a        self.finished=False\u000a        self.extraInfo=extraInfo\u000a        self._warnUseOfNext=True\u000a        self.seed=seed\u000a        #create dataHandler\u000a        self.data = DataHandler(trials=self)\u000a        if dataTypes!=None:\u000a            self.data.addDataType(dataTypes)\u000a        self.data.addDataType('ran')\u000a        self.data['ran'].mask=False#this is a bool - all entries are valid\u000a        self.data.addDataType('order')\u000a        #generate stimulus sequence\u000a        if self.method in ['random','sequential', 'fullRandom']:\u000a            self.sequenceIndices = self._createSequence()\u000a        else: self.sequenceIndices=[]\u000a\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a\u000a    def __iter__(self):\u000a        return self\u000a    def __repr__(self):\u000a        """prints a more verbose version of self as string"""\u000a        return self.__str__(verbose=True)\u000a\u000a    def __str__(self, verbose=False):\u000a        """string representation of the object"""\u000a        strRepres = 'psychopy.data.TrialHandler(\u005cn'\u000a        attribs = dir(self)\u000a\u000a        #print data first, then all others\u000a        try: data=self.data\u000a        except: data=None\u000a        if data:\u000a            strRepres += str('\u005ctdata=')\u000a            strRepres +=str(data)+'\u005cn'\u000a\u000a        for thisAttrib in attribs:\u000a            #can handle each attribute differently\u000a            if 'instancemethod' in str(type(getattr(self,thisAttrib))):\u000a                #this is a method\u000a                continue\u000a            elif thisAttrib[0]=='_':\u000a                #the attrib is private\u000a                continue\u000a            elif thisAttrib=='data':\u000a                #we handled this first\u000a                continue\u000a            elif len(str(getattr(self,thisAttrib)))>20 and \u005c\u000a                 not verbose:\u000a                #just give type of LONG public attribute\u000a                strRepres += str('\u005ct'+thisAttrib+'=')\u000a                strRepres += str(type(getattr(self,thisAttrib)))+'\u005cn'\u000a            else:\u000a                #give the complete contents of attribute\u000a                strRepres += str('\u005ct'+thisAttrib+'=')\u000a                strRepres += str(getattr(self,thisAttrib))+'\u005cn'\u000a\u000a        strRepres+=')'\u000a        return strRepres\u000a\u000a    def _createSequence(self):\u000a        """\u000a        Pre-generates the sequence of trial presentations (for non-adaptive methods).\u000a        This is called automatically when the TrialHandler is initialised so doesn't\u000a        need an explicit call from the user.\u000a\u000a        The returned sequence has form indices[stimN][repN]\u000a        Example: sequential with 6 trialtypes (rows), 5 reps (cols), returns:\u000a            [[0 0 0 0 0]\u000a             [1 1 1 1 1]\u000a             [2 2 2 2 2]\u000a             [3 3 3 3 3]\u000a             [4 4 4 4 4]\u000a             [5 5 5 5 5]]\u000a        These 30 trials will be returned by .next() in the order:\u000a            0, 1, 2, 3, 4, 5,   0, 1, 2, ...  ... 3, 4, 5\u000a\u000a        To add a new type of sequence (as of v1.65.02):\u000a        - add the sequence generation code here\u000a        - adjust "if self.method in [ ...]:" in both __init__ and .next()\u000a        - adjust allowedVals in experiment.py -> shows up in DlgLoopProperties\u000a        Note that users can make any sequence whatsoever outside of PsychoPy, and\u000a        specify sequential order; any order is possible this way.\u000a        """\u000a        # create indices for a single rep\u000a        indices = numpy.asarray(self._makeIndices(self.trialList), dtype=int)\u000a\u000a        if self.method == 'random':\u000a            sequenceIndices = []\u000a            seed=self.seed\u000a            for thisRep in range(self.nReps):\u000a                thisRepSeq = misc.shuffleArray(indices.flat, seed=seed).tolist()\u000a                seed=None#so that we only seed the first pass through!\u000a                sequenceIndices.append(thisRepSeq)\u000a            sequenceIndices = numpy.transpose(sequenceIndices)\u000a        elif self.method == 'sequential':\u000a            sequenceIndices = numpy.repeat(indices,self.nReps,1)\u000a        elif self.method == 'fullRandom':\u000a            # indices*nReps, flatten, shuffle, unflatten; only use seed once\u000a            sequential = numpy.repeat(indices, self.nReps,1) # = sequential\u000a            randomFlat = misc.shuffleArray(sequential.flat, seed=self.seed)\u000a            sequenceIndices = numpy.reshape(randomFlat, (len(indices), self.nReps))\u000a        logging.exp('Created sequence: %s, trialTypes=%d, nReps=%i, seed=%s' %\u000a                (self.method, len(indices), self.nReps, str(self.seed) )  )\u000a        return sequenceIndices\u000a\u000a    def _makeIndices(self,inputArray):\u000a        """\u000a        Creates an array of tuples the same shape as the input array\u000a        where each tuple contains the indices to itself in the array.\u000a\u000a        Useful for shuffling and then using as a reference.\u000a        """\u000a        inputArray  = numpy.asarray(inputArray, 'O')#make sure its an array of objects (can be strings etc)\u000a        #get some simple variables for later\u000a        dims=inputArray.shape\u000a        dimsProd=numpy.product(dims)\u000a        dimsN = len(dims)\u000a        dimsList = range(dimsN)\u000a        listOfLists = []\u000a        arrayOfTuples = numpy.ones(dimsProd, 'O')#this creates space for an array of any objects\u000a\u000a        #for each dimension create list of its indices (using modulo)\u000a        for thisDim in dimsList:\u000a            prevDimsProd = numpy.product(dims[:thisDim])\u000a            thisDimVals = numpy.arange(dimsProd)/prevDimsProd % dims[thisDim] #NB this means modulus in python\u000a            listOfLists.append(thisDimVals)\u000a\u000a        #convert to array\u000a        indexArr = numpy.asarray(listOfLists)\u000a        for n in range(dimsProd):\u000a            arrayOfTuples[n] = tuple((indexArr[:,n]))\u000a        return (numpy.reshape(arrayOfTuples,dims)).tolist()\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; thisTrial, thisTrialN and thisIndex\u000a        If the trials have ended this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            trials = TrialHandler(.......)\u000a            for eachTrial in trials:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            trials = TrialHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = trials.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a        """\u000a        #update pointer for next trials\u000a        self.thisTrialN+=1#number of trial this pass\u000a        self.thisN+=1 #number of trial in total\u000a        self.nRemaining-=1\u000a        if self.thisTrialN==len(self.trialList):\u000a            #start a new repetition\u000a            self.thisTrialN=0\u000a            self.thisRepN+=1\u000a        if self.thisRepN>=self.nReps:\u000a            #all reps complete\u000a            self.thisTrial=[]\u000a            self.finished=True\u000a\u000a        if self.finished==True:\u000a            self._terminate()\u000a\u000a        #fetch the trial info\u000a        if self.method in ['random','sequential','fullRandom']:\u000a            self.thisIndex = self.sequenceIndices[self.thisTrialN][self.thisRepN]\u000a            self.thisTrial = self.trialList[self.thisIndex]\u000a            self.data.add('ran',1)\u000a            self.data.add('order',self.thisN)\u000a        logging.exp('New trial (rep=%i, index=%i): %s' %(self.thisRepN, self.thisTrialN, self.thisTrial), obj=self.thisTrial)\u000a        return self.thisTrial\u000a\u000a    def getFutureTrial(self, n=1):\u000a        """Returns the condition for n trials into the future without advancing\u000a        the trials.\u000a        """\u000a        if n>self.nRemaining:\u000a            return None\u000a        seqs = numpy.array(self.sequenceIndices).transpose().flat\u000a        condIndex=seqs[self.thisN+n]\u000a        return self.trialList[condIndex]\u000a\u000a    def _createOutputArray(self,stimOut,dataOut,delim=None,\u000a                          matrixOnly=False):\u000a        """\u000a        Does the leg-work for saveAsText and saveAsExcel.\u000a        Combines stimOut with ._parseDataOutput()\u000a        """\u000a        if stimOut==[] and len(self.trialList) and hasattr(self.trialList[0],'keys'):\u000a            stimOut=self.trialList[0].keys()\u000a            #these get added somewhere (by DataHandler?)\u000a            if 'n' in stimOut:\u000a                stimOut.remove('n')\u000a            if 'float' in stimOut:\u000a                stimOut.remove('float')\u000a\u000a        lines=[]\u000a        #parse the dataout section of the output\u000a        dataOut, dataAnal, dataHead = self._createOutputArrayData(dataOut=dataOut)\u000a        if not matrixOnly:\u000a            thisLine=[]\u000a            lines.append(thisLine)\u000a            #write a header line\u000a            for heading in stimOut+dataHead:\u000a                if heading=='ran_sum': heading ='n'\u000a                elif heading=='order_raw': heading ='order'\u000a                thisLine.append(heading)\u000a\u000a        #loop through stimuli, writing data\u000a        for stimN in range(len(self.trialList)):\u000a            thisLine=[]\u000a            lines.append(thisLine)\u000a            #first the params for this stim (from self.trialList)\u000a            for heading in stimOut:\u000a                thisLine.append(self.trialList[stimN][heading])\u000a\u000a            #then the data for this stim (from self.data)\u000a            for thisDataOut in dataOut:\u000a                #make a string version of the data and then format it\u000a                tmpData = dataAnal[thisDataOut][stimN]\u000a                if hasattr(tmpData,'tolist'): #is a numpy array\u000a                    strVersion = unicode(tmpData.tolist())\u000a                    #for numeric data replace None with a blank cell\u000a                    if tmpData.dtype.kind not in ['SaUV']:\u000a                        strVersion=strVersion.replace('None','')\u000a                elif tmpData in [None,'None']:\u000a                    strVersion=''\u000a                else:\u000a                    strVersion = unicode(tmpData)\u000a\u000a                if strVersion=='()':\u000a                    strVersion="--"# 'no data' in masked array should show as "--"\u000a                #handle list of values (e.g. rt_raw )\u000a                if len(strVersion) and strVersion[0] in ["[", "("] and strVersion[-1] in ["]", ")"]:\u000a                    strVersion=strVersion[1:-1]#skip first and last chars\u000a                #handle lists of lists (e.g. raw of multiple key presses)\u000a                if len(strVersion) and strVersion[0] in ["[", "("] and strVersion[-1] in ["]", ")"]:\u000a                    tup = eval(strVersion) #convert back to a tuple\u000a                    for entry in tup:\u000a                        #contents of each entry is a list or tuple so keep in quotes to avoid probs with delim\u000a                        thisLine.append(unicode(entry))\u000a                else:\u000a                    thisLine.extend(strVersion.split(','))\u000a\u000a        #add self.extraInfo\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            lines.append([])\u000a            lines.append(['extraInfo'])#give a single line of space and then a heading\u000a            for key, value in self.extraInfo.items():\u000a                lines.append([key,value])\u000a        return lines\u000a\u000a    def _createOutputArrayData(self, dataOut):\u000a        """This just creates the dataOut part of the output matrix.\u000a        It is called by _createOutputArray() which creates the header line and adds the stimOut columns\u000a        """\u000a        dataHead=[]#will store list of data headers\u000a        dataAnal=dict([])    #will store data that has been analyzed\u000a        if type(dataOut)==str: dataOut=[dataOut]#don't do list convert or we get a list of letters\u000a        elif type(dataOut)!=list: dataOut = list(dataOut)\u000a\u000a        #expand any 'all' dataTypes to be the full list of available dataTypes\u000a        allDataTypes=self.data.keys()\u000a        #treat these separately later\u000a        allDataTypes.remove('ran')\u000a        #ready to go trhough standard data types\u000a        dataOutNew=[]\u000a        for thisDataOut in dataOut:\u000a            if thisDataOut=='n':\u000a                #n is really just the sum of the ran trials\u000a                dataOutNew.append('ran_sum')\u000a                continue#no need to do more with this one\u000a            #then break into dataType and analysis\u000a            dataType, analType =string.rsplit(thisDataOut, '_', 1)\u000a            if dataType=='all':\u000a                dataOutNew.extend([key+"_"+analType for key in allDataTypes])\u000a                if 'order_mean' in dataOutNew: dataOutNew.remove('order_mean')\u000a                if 'order_std' in dataOutNew: dataOutNew.remove('order_std')\u000a            else:\u000a                dataOutNew.append(thisDataOut)\u000a        dataOut=dataOutNew\u000a        dataOut.sort()#so that all datatypes come together, rather than all analtypes\u000a\u000a        #do the various analyses, keeping track of fails (e.g. mean of a string)\u000a        dataOutInvalid=[]\u000a        #add back special data types (n and order)\u000a        if 'ran_sum' in dataOut:#move n to the first column\u000a            dataOut.remove('ran_sum')\u000a            dataOut.insert(0,'ran_sum')\u000a        if 'order_raw' in dataOut:#move order_raw to the second column\u000a            dataOut.remove('order_raw')\u000a            dataOut.append('order_raw')\u000a        #do the necessary analysis on the data\u000a        for thisDataOutN,thisDataOut in enumerate(dataOut):\u000a            dataType, analType =string.rsplit(thisDataOut, '_', 1)\u000a            if not self.data.has_key(dataType):\u000a                dataOutInvalid.append(thisDataOut)#that analysis can't be done\u000a                continue\u000a            thisData = self.data[dataType]\u000a\u000a            #set the header\u000a            dataHead.append(dataType+'_'+analType)\u000a            #analyse thisData using numpy module\u000a            if analType in dir(numpy):\u000a                try:#this will fail if we try to take mean of a string for example\u000a                    if analType=='std':\u000a                        thisAnal = numpy.std(thisData,axis=1,ddof=0)\u000a                        #normalise by N-1 instead. his should work by setting ddof=1\u000a                        #but doesn't as of 08/2010 (because of using a masked array?)\u000a                        N=thisData.shape[1]\u000a                        if N == 1:\u000a                            thisAnal*=0 #prevent a divide-by-zero error\u000a                        else:\u000a                            thisAnal = thisAnal*numpy.sqrt(N)/numpy.sqrt(N-1)\u000a                    else:\u000a                        exec("thisAnal = numpy.%s(thisData,1)" %analType)\u000a                except:\u000a                    dataHead.remove(dataType+'_'+analType)#that analysis doesn't work\u000a                    dataOutInvalid.append(thisDataOut)\u000a                    continue#to next analysis\u000a            elif analType=='raw':\u000a                thisAnal=thisData\u000a            else:\u000a                raise AttributeError, 'You can only use analyses from numpy'\u000a            #add extra cols to header if necess\u000a            if len(thisAnal.shape)>1:\u000a                for n in range(thisAnal.shape[1]-1):\u000a                    dataHead.append("")\u000a            dataAnal[thisDataOut]=thisAnal\u000a\u000a        #remove invalid analyses (e.g. average of a string)\u000a        for invalidAnal in dataOutInvalid: dataOut.remove(invalidAnal)\u000a        return dataOut, dataAnal, dataHead\u000a\u000a\u000a    def saveAsWideText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False,\u000a                   appendFile=True,\u000a                  ):\u000a        """\u000a        Write a text file with the session, stimulus, and data values from each trial in chronological order.\u000a\u000a        That is, unlike 'saveAsText' and 'saveAsExcel':\u000a         - each row comprises information from only a single trial.\u000a         - no summarising is done (such as collapsing to produce mean and standard deviation values across trials).\u000a\u000a        This 'wide' format, as expected by R for creating dataframes, and various other analysis programs, means that some\u000a        information must be repeated on every row.\u000a\u000a        In particular, if the trialHandler's 'extraInfo' exists, then each entry in there occurs in every row.\u000a        In builder, this will include any entries in the 'Experiment info' field of the 'Experiment settings' dialog.\u000a        In Coder, this information can be set using something like:\u000a            myTrialHandler.extraInfo = {'SubjID':'Joan Smith', 'DOB':1970 Nov 16, 'Group':'Control'}\u000a\u000a         :Parameters:\u000a\u000a            fileName:\u000a                if extension is not specified, '.csv' will be appended if the delimiter is ',', else '.txt' will be appended.\u000a                Can include path info.\u000a\u000a            delim:\u000a                allows the user to use a delimiter other than the default tab ("," is popular with file extension ".csv")\u000a\u000a            matrixOnly:\u000a                outputs the data with no header row.\u000a\u000a            appendFile:\u000a                will add this output to the end of the specified file if it already exists.\u000a\u000a        """\u000a        if self.thisTrialN<1 and self.thisRepN<1:#if both are <1 we haven't started\u000a            logging.info('TrialHandler.saveAsWideText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #create the file or print to stdout\u000a        if appendFile:\u000a            writeFormat='a'\u000a        else: writeFormat='w' #will overwrite a file\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.tsv', '.TSV', '.txt', '.TXT', '.csv', '.CSV']:\u000a            f = codecs.open(fileName,writeFormat, encoding = "utf-8")\u000a        else:\u000a            if delim==',': f = codecs.open(fileName+'.csv', writeFormat, encoding="utf-8")\u000a            else: f=codecs.open(fileName+'.txt',writeFormat, encoding = "utf-8")\u000a\u000a        # collect parameter names related to the stimuli:\u000a        if self.trialList[0]:\u000a            header = self.trialList[0].keys()\u000a        else:\u000a            header = []\u000a        # and then add parameter names related to data (e.g. RT)\u000a        header.extend(self.data.dataTypes)\u000a\u000a        # loop through each trial, gathering the actual values:\u000a        dataOut = []\u000a        trialCount = 0\u000a        # total number of trials = number of trialtypes * number of repetitions:\u000a\u000a        repsPerType={}\u000a        for rep in range(self.nReps):\u000a            for trialN in range(len(self.trialList)):\u000a                #find out what trial type was on this trial\u000a                trialTypeIndex = self.sequenceIndices[trialN, rep]\u000a                #determine which repeat it is for this trial\u000a                if trialTypeIndex not in repsPerType.keys():\u000a                    repsPerType[trialTypeIndex]=0\u000a                else:\u000a                    repsPerType[trialTypeIndex]+=1\u000a                repThisType=repsPerType[trialTypeIndex]#what repeat are we on for this trial type?\u000a\u000a                # create a dictionary representing each trial:\u000a                # this is wide format, so we want fixed information (e.g. subject ID, date, etc) repeated every line if it exists:\u000a                if (self.extraInfo != None):\u000a                    nextEntry = self.extraInfo.copy()\u000a                else:\u000a                    nextEntry = {}\u000a\u000a                # add a trial number so the original order of the data can always be recovered if sorted during analysis:\u000a                trialCount += 1\u000a                nextEntry["TrialNumber"] = trialCount\u000a\u000a                # now collect the value from each trial of the variables named in the header:\u000a                for parameterName in header:\u000a                    # the header includes both trial and data variables, so need to check before accessing:\u000a                    if self.trialList[trialTypeIndex] and self.trialList[trialTypeIndex].has_key(parameterName):\u000a                        nextEntry[parameterName] = self.trialList[trialTypeIndex][parameterName]\u000a                    elif self.data.has_key(parameterName):\u000a                        nextEntry[parameterName] = self.data[parameterName][trialTypeIndex][repThisType]\u000a                    else: # allow a null value if this parameter wasn't explicitly stored on this trial:\u000a                        nextEntry[parameterName] = ''\u000a\u000a                #store this trial's data\u000a                dataOut.append(nextEntry)\u000a\u000a        # get the extra 'wide' parameter names into the header line:\u000a        header.insert(0,"TrialNumber")\u000a        if (self.extraInfo != None):\u000a            for key in self.extraInfo:\u000a                header.insert(0, key)\u000a\u000a        if not matrixOnly:\u000a        # write the header row:\u000a            nextLine = ''\u000a            for parameterName in header:\u000a                nextLine = nextLine + parameterName + delim\u000a            f.write(nextLine[:-1] + '\u005cn') # remove the final orphaned tab character\u000a\u000a        # write the data matrix:\u000a        for trial in dataOut:\u000a            nextLine = ''\u000a            for parameterName in header:\u000a                nextLine = nextLine + unicode(trial[parameterName]) + delim\u000a            nextLine = nextLine[:-1] # remove the final orphaned tab character\u000a            f.write(nextLine + '\u005cn')\u000a\u000a        if f != sys.stdout:\u000a            f.close()\u000a            logging.info('saved wide-format data to %s' %f.name)\u000a\u000a    def addData(self, thisType, value, position=None):\u000a        """Add data for the current trial\u000a        """\u000a        self.data.add(thisType, value, position=None)\u000a        if self.getExp()!=None:#update the experiment handler too\u000a            self.getExp().addData(thisType, value)\u000a\u000a\u000adef importTrialTypes(fileName, returnFieldNames=False):\u000a    """importTrialTypes is DEPRECATED (as of v1.70.00)\u000a    Please use `importConditions` for identical functionality.\u000a    """\u000a    logging.warning("importTrialTypes is DEPRECATED (as of v1.70.00). Please use `importConditions` for identical functionality.")\u000a    return importConditions(fileName, returnFieldNames)\u000a\u000adef importConditions(fileName, returnFieldNames=False):\u000a    """Imports a list of conditions from an .xlsx, .csv, or .pkl file\u000a\u000a    The output is suitable as an input to :class:`TrialHandler` `trialTypes` or to\u000a    :class:`MultiStairHandler` as a `conditions` list.\u000a\u000a    If `fileName` ends with:\u000a        - .csv:  import as a comma-separated-value file (header + row x col)\u000a        - .xlsx: import as Excel 2007 (xlsx) files. Sorry no support for older (.xls) is planned.\u000a        - .pkl:  import from a pickle file as list of lists (header + row x col)\u000a\u000a    The file should contain one row per type of trial needed and one column\u000a    for each parameter that defines the trial type. The first row should give\u000a    parameter names, which should:\u000a\u000a        - be unique\u000a        - begin with a letter (upper or lower case)\u000a        - contain no spaces or other punctuation (underscores are permitted)\u000a\u000a    """\u000a    def _assertValidVarNames(fieldNames, fileName):\u000a        """screens a list of names as candidate variable names. if all names are\u000a        OK, return silently; else raise ImportError with msg\u000a        """\u000a        if not all(fieldNames):\u000a            raise ImportError, 'Conditions file %s: Missing parameter name(s); empty cell(s) in the first row?' % fileName\u000a        for name in fieldNames:\u000a            OK, msg = isValidVariableName(name)\u000a            if not OK: #tailor message to importConditions\u000a                msg = msg.replace('Variables', 'Parameters (column headers)')\u000a                raise ImportError, 'Conditions file %s: %s%s"%s"' %(fileName, msg, os.linesep*2, name)\u000a\u000a    if fileName in ['None','none',None]:\u000a        if returnFieldNames:\u000a            return [], []\u000a        return []\u000a    if not os.path.isfile(fileName):\u000a        raise ImportError, 'Conditions file not found: %s' %os.path.abspath(fileName)\u000a\u000a    if fileName.endswith('.csv'):\u000a        #use csv import library to fetch the fieldNames\u000a        f = open(fileName, 'rU')#the U converts line endings to os.linesep (not unicode!)\u000a        #lines = f.read().split(os.linesep)#csv module is temperamental with line endings\u000a        try:\u000a            reader = csv.reader(f)#.split(os.linesep))\u000a        except:\u000a            raise ImportError, 'Could not open %s as conditions' % fileName\u000a        fieldNames = reader.next() # first row\u000a        _assertValidVarNames(fieldNames, fileName)\u000a        #use matplotlib to import data and intelligently check for data types\u000a        #all data in one column will be given a single type (e.g. if one cell is string, all will be set to string)\u000a        trialsArr = mlab.csv2rec(f) # data = non-header row x col\u000a        f.close()\u000a        #convert the record array into a list of dicts\u000a        trialList = []\u000a        for trialN, trialType in enumerate(trialsArr):\u000a            thisTrial ={}\u000a            for fieldN, fieldName in enumerate(fieldNames):\u000a                val = trialsArr[trialN][fieldN]\u000a                if type(val)==numpy.string_:\u000a                    val = unicode(val.decode('utf-8'))\u000a                    #if it looks like a list, convert it:\u000a                    if val.startswith('[') and val.endswith(']'):\u000a                        #exec('val=%s' %unicode(val.decode('utf8')))\u000a                        val = eval(val)\u000a                thisTrial[fieldName] = val\u000a            trialList.append(thisTrial)\u000a    elif fileName.endswith('.pkl'):\u000a        f = open(fileName, 'rU') # is U needed?\u000a        try:\u000a            trialsArr = cPickle.load(f)\u000a        except:\u000a            raise ImportError, 'Could not open %s as conditions' % fileName\u000a        f.close()\u000a        trialList = []\u000a        fieldNames = trialsArr[0] # header line first\u000a        _assertValidVarNames(fieldNames, fileName)\u000a        for row in trialsArr[1:]:\u000a            thisTrial = {}\u000a            for fieldN, fieldName in enumerate(fieldNames):\u000a                thisTrial[fieldName] = row[fieldN] # type is correct, being .pkl\u000a            trialList.append(thisTrial)\u000a    else:\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for loading excel format files, but it was not found.'\u000a        try:\u000a            wb = load_workbook(filename = fileName)\u000a        except: # InvalidFileException(unicode(e)): # this fails\u000a            raise ImportError, 'Could not open %s as conditions' % fileName\u000a        ws = wb.worksheets[0]\u000a        nCols = ws.get_highest_column()\u000a        nRows = ws.get_highest_row()\u000a\u000a        #get parameter names from the first row header\u000a        fieldNames = []\u000a        for colN in range(nCols):\u000a            fieldName = ws.cell(_getExcelCellName(col=colN, row=0)).value\u000a            fieldNames.append(fieldName)\u000a        _assertValidVarNames(fieldNames, fileName)\u000a\u000a        #loop trialTypes\u000a        trialList = []\u000a        for rowN in range(1, nRows):#skip header first row\u000a            thisTrial={}\u000a            for colN in range(nCols):\u000a                val = ws.cell(_getExcelCellName(col=colN, row=rowN)).value\u000a                #if it looks like a list, convert it\u000a                if type(val) in [unicode, str] and (\u000a                        val.startswith('[') and val.endswith(']') or\u000a                        val.startswith('(') and val.endswith(')') ):\u000a                    val = eval(val)\u000a                fieldName = fieldNames[colN]\u000a                thisTrial[fieldName] = val\u000a            trialList.append(thisTrial)\u000a\u000a    logging.exp('Imported %s as conditions, %d conditions, %d params' %\u000a                 (fileName, len(trialList), len(fieldNames)))\u000a    if returnFieldNames:\u000a        return (trialList,fieldNames)\u000a    else:\u000a        return trialList\u000a\u000adef createFactorialTrialList(factors):\u000a    """Create a trialList by entering a list of factors with names (keys) and levels (values)\u000a    it will return a trialList in which all factors have been factorially combined (so for example\u000a    if there are two factors with 3 and 5 levels the trialList will be a list of 3*5 = 15, each specifying\u000a    the values for a given trial\u000a\u000a    Usage::\u000a\u000a        trialList = createFactorialTrialList(factors)\u000a\u000a    :Parameters:\u000a\u000a        factors : a dictionary with names (keys) and levels (values) of the factors\u000a\u000a    Example::\u000a\u000a        mytrials = createFactorialTrialList( factors={"text": ["red", "green", "blue"],\u000a            "letterColor": ["red", "green"], "size": [0,1]})\u000a    """\u000a\u000a    # the first step is to place all the factorial combinations in a list of lists\u000a    tempListOfLists=[[]]\u000a    for key in factors:\u000a        alist = factors[key]   # this takes the levels of each factor as a set of values (a list) at a time\u000a        tempList = []\u000a        for value in alist:     # now we loop over the values in a given list, and add each value of the other lists\u000a            for iterList in tempListOfLists:\u000a                tempList.append(iterList + [key,value])\u000a        tempListOfLists = tempList\u000a\u000a    # this second step is so we can return a list in the format of trialList\u000a    trialList = []\u000a    for atrial in tempListOfLists:\u000a        keys = atrial[0::2]          #the even elements are keys\u000a        values = atrial[1::2]       #the odd elements are values\u000a        atrialDict = {}\u000a        for i in range(len(keys)):\u000a            atrialDict[keys[i]] = values[i]     #this combines the key with the value\u000a        trialList.append(atrialDict)             #append one trial at a time to the final trialList\u000a\u000a    return trialList\u000a\u000aclass StairHandler(_BaseTrialHandler):\u000a    """Class to handle smoothly the selection of the next trial\u000a    and report current values etc.\u000a    Calls to nextTrial() will fetch the next object given to this\u000a    handler, according to the method specified.\u000a\u000a    See ``demo_trialHandler.py``\u000a\u000a    The staircase will terminate when *nTrials* AND *nReversals* have been exceeded. If *stepSizes* was an array\u000a    and has been exceeded before nTrials is exceeded then the staircase will continue\u000a    to reverse\u000a\u000a    """\u000a    def __init__(self,\u000a                 startVal,\u000a                 nReversals=None,\u000a                 stepSizes=4,  #dB stepsize\u000a                 nTrials=0,\u000a                 nUp=1,\u000a                 nDown=3, #correct responses before stim goes down\u000a                 extraInfo=None,\u000a                 method = '2AFC',\u000a                 stepType='db',\u000a                 minVal=None,\u000a                 maxVal=None,\u000a                 originPath=None,\u000a                 name=''):\u000a        """\u000a        :Parameters:\u000a\u000a            startVal:\u000a                The initial value for the staircase.\u000a\u000a            nReversals:\u000a                The minimum number of reversals permitted. If stepSizes is a list then there must\u000a                also be enough reversals to satisfy this list.\u000a\u000a            stepSizes:\u000a                The size of steps as a single value or a list (or array). For a single value the step\u000a                size is fixed. For an array or list the step size will progress to the next entry\u000a                at each reversal.\u000a\u000a            nTrials:\u000a                The minimum number of trials to be conducted. If the staircase has not reached the\u000a                required number of reversals then it will continue.\u000a\u000a            nUp:\u000a                The number of 'incorrect' (or 0) responses before the staircase level increases.\u000a\u000a            nDown:\u000a                The number of 'correct' (or 1) responses before the staircase level decreases.\u000a\u000a            extraInfo:\u000a                A dictionary (typically) that will be stored along with collected data using\u000a                :func:`~psychopy.data.StairHandler.saveAsPickle` or\u000a                :func:`~psychopy.data.StairHandler.saveAsText` methods.\u000a\u000a            stepType:\u000a                specifies whether each step will be a jump of the given size in\u000a                'db', 'log' or 'lin' units ('lin' means this intensity will be added/subtracted)\u000a\u000a            method:\u000a                Not used and may be deprecated in future releases.\u000a\u000a            stepType: *'db'*, 'lin', 'log'\u000a                The type of steps that should be taken each time. 'lin' will simply add or subtract that\u000a                amount each step, 'db' and 'log' will step by a certain number of decibels or log units\u000a                (note that this will prevent your value ever reaching zero or less)\u000a\u000a            minVal: *None*, or a number\u000a                The smallest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            maxVal: *None*, or a number\u000a                The largest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a        """\u000a\u000a        """\u000a        trialList: a simple list (or flat array) of trials.\u000a\u000a            """\u000a        self.name=name\u000a        self.startVal=startVal\u000a        self.nReversals=nReversals\u000a        self.nUp=nUp\u000a        self.nDown=nDown\u000a        self.extraInfo=extraInfo\u000a        self.method=method\u000a        self.stepType=stepType\u000a\u000a        self.stepSizes=stepSizes\u000a        if type(stepSizes) in [int, float]:\u000a            self.stepSizeCurrent=stepSizes\u000a            self._variableStep=False\u000a        else:#list, tuple or array\u000a            self.stepSizeCurrent=stepSizes[0]\u000a            self.nReversals= max(len(stepSizes),self.nReversals)\u000a            self._variableStep=True\u000a\u000a        self.nTrials = nTrials#to terminate the nTrials must be exceeded and either\u000a        self.finished=False\u000a        self.thisTrialN = -1\u000a        self.data = []\u000a        self.intensities=[]\u000a        self.reversalPoints = []\u000a        self.reversalIntensities=[]\u000a        self.currentDirection='start' #initially it goes down but on every step\u000a        self.correctCounter=0  #correct since last stim change (minus are incorrect)\u000a        self._nextIntensity=self.startVal\u000a        self._warnUseOfNext=True\u000a        self.minVal = minVal\u000a        self.maxVal = maxVal\u000a\u000a        #self.originPath and self.origin (the contents of the origin file)\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a    def __iter__(self):\u000a        return self\u000a\u000a    def addData(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        This is essential to advance the staircase to a new intensity level!\u000a\u000a        Supplying an `intensity` value here indicates that you did not use the\u000a        recommended intensity in your last trial and the staircase will\u000a        replace its recorded value with the one you supplied here.\u000a        """\u000a        self.data.append(result)\u000a\u000a        #if needed replace the existing intensity with this custom one\u000a        if intensity!=None:\u000a            self.intensities.pop()\u000a            self.intensities.append(intensity)\u000a\u000a        #increment the counter of correct scores\u000a        if result==1:\u000a            if len(self.data)>1 and self.data[-2]==result:\u000a                #increment if on a run\u000a                self.correctCounter+=1\u000a            else:\u000a                #or reset\u000a                self.correctCounter = 1\u000a\u000a        else:\u000a            if  len(self.data)>1 and self.data[-2]==result:\u000a                #increment if on a run\u000a                self.correctCounter-=1\u000a            else:\u000a                #or reset\u000a                self.correctCounter = -1\u000a\u000a        if self.getExp()!=None:#update the experiment handler too\u000a            self.getExp().addData("%s.result" %(self.name), result)\u000a        self.calculateNextIntensity()\u000a\u000a    def calculateNextIntensity(self):\u000a        """based on current intensity, counter of correct responses and current direction"""\u000a\u000a        if len(self.reversalIntensities)<1:\u000a            #always using a 1-down, 1-up rule initially\u000a            if self.data[-1]==1:    #last answer correct\u000a                #got it right\u000a                self._intensityDec()\u000a                if self.currentDirection=='up':\u000a                    reversal=True\u000a                else:#direction is 'down' or 'start'\u000a                    reversal=False\u000a                    self.currentDirection='down'\u000a            else:\u000a                #got it wrong\u000a                self._intensityInc()\u000a                if self.currentDirection=='down':\u000a                    reversal=True\u000a                else:#direction is 'up' or 'start'\u000a                    reversal=False\u000a                #now:\u000a                self.currentDirection='up'\u000a\u000a        elif self.correctCounter >= self.nDown: #n right, time to go down!\u000a            #make it harder\u000a            self._intensityDec()\u000a            if self.currentDirection!='down':\u000a                reversal=True\u000a            else:\u000a                reversal=False\u000a            self.currentDirection='down'\u000a\u000a        elif self.correctCounter <= -self.nUp: #n wrong, time to go up!\u000a            #make it easier\u000a            self._intensityInc()\u000a            #note current direction\u000a            if self.currentDirection!='up':\u000a                reversal=True\u000a            else:\u000a                reversal=False\u000a            self.currentDirection='up'\u000a\u000a        else:\u000a            #same as previous trial\u000a            reversal=False\u000a\u000a\u000a        #add reversal info\u000a        if reversal:\u000a            self.reversalPoints.append(self.thisTrialN)\u000a            self.reversalIntensities.append(self.intensities[-1])\u000a        #test if we're done\u000a        if len(self.reversalIntensities)>=self.nReversals and \u005c\u000a            len(self.intensities)>=self.nTrials:\u000a                self.finished=True\u000a        #new step size if necessary\u000a        if reversal and self._variableStep and self.finished==False:\u000a            if len(self.reversalIntensities) >= len(self.stepSizes):\u000a                #we've gone beyond the list of step sizes so just use the last one\u000a                self.stepSizeCurrent = self.stepSizes[-1]\u000a            else:\u000a                self.stepSizeCurrent = self.stepSizes[len(self.reversalIntensities)]\u000a\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; `thisTrial`, `thisTrialN` and `thisIndex`.\u000a\u000a        If the trials have ended, calling this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            staircase = StairHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            staircase = StairHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a\u000a        """\u000a        if self.finished==False:\u000a            #update pointer for next trial\u000a            self.thisTrialN+=1\u000a            self.intensities.append(self._nextIntensity)\u000a            return self._nextIntensity\u000a        else:\u000a            self._terminate()\u000a    def _intensityInc(self):\u000a        """increment the current intensity and reset counter"""\u000a        if self.stepType=='db':\u000a            self._nextIntensity *= 10.0**(self.stepSizeCurrent/20.0)\u000a        elif self.stepType=='log':\u000a            self._nextIntensity *= 10.0**self.stepSizeCurrent\u000a        elif self.stepType=='lin':\u000a            self._nextIntensity += self.stepSizeCurrent\u000a        #check we haven't gone out of the legal range\u000a        if (self._nextIntensity > self.maxVal) and self.maxVal is not None:\u000a            self._nextIntensity = self.maxVal\u000a        self.correctCounter =0\u000a\u000a    def _intensityDec(self):\u000a        """decrement the current intensity and reset counter"""\u000a        if self.stepType=='db':\u000a            self._nextIntensity /= 10.0**(self.stepSizeCurrent/20.0)\u000a        if self.stepType=='log':\u000a            self._nextIntensity /= 10.0**self.stepSizeCurrent\u000a        elif self.stepType=='lin':\u000a            self._nextIntensity -= self.stepSizeCurrent\u000a        self.correctCounter =0\u000a        #check we haven't gone out of the legal range\u000a        if (self._nextIntensity < self.minVal) and self.minVal is not None:\u000a            self._nextIntensity = self.minVal\u000a\u000a    def saveAsText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False,\u000a                  ):\u000a        """\u000a        Write a text file with the data\u000a\u000a        :Parameters:\u000a\u000a            fileName: a string\u000a                The name of the file, including path if needed. The extension\u000a                `.dlm` will be added if not included.\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a\u000a        if self.thisTrialN<1:\u000a            logging.debug('StairHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a\u000a        #create the file or print to stdout\u000a        if fileName=='stdout':\u000a            f = sys.stdout\u000a        elif fileName[-4:] in ['.dlm','.DLM', '.csv','.CSV']:\u000a            f= file(fileName,'w')\u000a        else:\u000a            if delim==',': f=file(fileName+'.csv','w')\u000a            else: f=file(fileName+'.dlm','w')\u000a\u000a        #write the data\u000a        reversalStr = str(self.reversalIntensities)\u000a        reversalStr = string.replace( reversalStr, ',', delim)\u000a        reversalStr = string.replace( reversalStr, '[', '')\u000a        reversalStr = string.replace( reversalStr, ']', '')\u000a        f.write('\u005cnreversalIntensities=\u005ct%s\u005cn' %reversalStr)\u000a\u000a        reversalPts = str(self.reversalPoints)\u000a        reversalPts = string.replace( reversalPts, ',', delim)\u000a        reversalPts = string.replace( reversalPts, '[', '')\u000a        reversalPts = string.replace( reversalPts, ']', '')\u000a        f.write('reversalIndices=\u005ct%s\u005cn' %reversalPts)\u000a\u000a        rawIntens = str(self.intensities)\u000a        rawIntens = string.replace( rawIntens, ',', delim)\u000a        rawIntens = string.replace( rawIntens, '[', '')\u000a        rawIntens = string.replace( rawIntens, ']', '')\u000a        f.write('\u005cnintensities=\u005ct%s\u005cn' %rawIntens)\u000a\u000a        responses = str(self.data)\u000a        responses = string.replace( responses, ',', delim)\u000a        responses = string.replace( responses, '[', '')\u000a        responses = string.replace( responses, ']', '')\u000a        f.write('responses=\u005ct%s\u005cn' %responses)\u000a\u000a        #add self.extraInfo\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            strInfo = str(self.extraInfo)\u000a            #dict begins and ends with {} - remove\u000a            strInfo = strInfo[1:-1] #string.replace(strInfo, '{','');strInfo = string.replace(strInfo, '}','');\u000a            strInfo = string.replace(strInfo, ': ', ':\u005cn')#separate value from keyname\u000a            strInfo = string.replace(strInfo, ',', '\u005cn')#separate values from each other\u000a            strInfo = string.replace(strInfo, 'array([ ', '')\u000a            strInfo = string.replace(strInfo, '])', '')\u000a\u000a            f.write('\u005cn%s\u005cn' %strInfo)\u000a\u000a        f.write("\u005cn")\u000a        if f != sys.stdout:\u000a            f.close()\u000a            logging.info('saved data to %s' %f.name)\u000a\u000a    def saveAsExcel(self,fileName, sheetName='data',\u000a                   matrixOnly=False, appendFile=True,\u000a                  ):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that data can be stored in multiple named sheets within the file. So you could have a single file\u000a        named after your experiment and then have one worksheet for each participant. Or you could have\u000a        one file for each participant and then multiple sheets for repeated sessions etc.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        The file will contain a set of values specifying the staircase level ('intensity') at each\u000a        reversal, a list of reversal indices (trial numbers), the raw staircase/intensity\u000a        level on *every* trial and the corresponding responses of the participant on every trial.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            sheetName: string\u000a                the name of the worksheet within the file\u000a\u000a            matrixOnly: True or False\u000a                If set to True then only the data itself will be output (no additional info)\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a        """\u000a\u000a        if self.thisTrialN<1:\u000a            logging.debug('StairHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a        #NB this was based on the limited documentation (1 page wiki) for openpyxl v1.0\u000a        if not haveOpenpyxl:\u000a            raise ImportError, 'openpyxl is required for saving files in Excel (xlsx) format, but was not found.'\u000a            return -1\u000a\u000a        #import necessary subpackages - they are small so won't matter to do it here\u000a        from openpyxl.workbook import Workbook\u000a        from openpyxl.writer.excel import ExcelWriter\u000a        from openpyxl.reader.excel import load_workbook\u000a\u000a        if not fileName.endswith('.xlsx'): fileName+='.xlsx'\u000a        #create or load the file\u000a        if appendFile and os.path.isfile(fileName):\u000a            wb = load_workbook(fileName)\u000a            newWorkbook=False\u000a        else:\u000a            if not appendFile: #the file exists but we're not appending, so will be overwritten\u000a                logging.warning('Data file, %s, will be overwritten' %fileName)\u000a            wb = Workbook()#create new workbook\u000a            wb.properties.creator='PsychoPy'+psychopy.__version__\u000a            newWorkbook=True\u000a\u000a        ew = ExcelWriter(workbook = wb)\u000a\u000a        if newWorkbook:\u000a            ws = wb.worksheets[0]\u000a            ws.title=sheetName\u000a        else:\u000a            ws=wb.create_sheet()\u000a            ws.title=sheetName\u000a\u000a        #write the data\u000a        #reversals data\u000a        ws.cell('A1').value = 'Reversal Intensities'\u000a        ws.cell('B1').value = 'Reversal Indices'\u000a        for revN, revIntens in enumerate(self.reversalIntensities):\u000a            ws.cell(_getExcelCellName(col=0,row=revN+1)).value = unicode(revIntens)\u000a            ws.cell(_getExcelCellName(col=1,row=revN+1)).value = unicode(self.reversalPoints[revN])\u000a\u000a        #trials data\u000a        ws.cell('C1').value = 'All Intensities'\u000a        ws.cell('D1').value = 'All Responses'\u000a        for intenN, intensity in enumerate(self.intensities):\u000a            ws.cell(_getExcelCellName(col=2,row=intenN+1)).value = unicode(intensity)\u000a            ws.cell(_getExcelCellName(col=3,row=intenN+1)).value = unicode(self.data[intenN])\u000a\u000a        #add self.extraInfo\u000a        rowN = 0\u000a        if (self.extraInfo != None) and not matrixOnly:\u000a            ws.cell(_getExcelCellName(col=6,row=rowN)).value = 'extraInfo'; rowN+=1\u000a            for key,val in self.extraInfo.items():\u000a                ws.cell(_getExcelCellName(col=6,row=rowN)).value = unicode(key)+u':'\u000a                ws.cell(_getExcelCellName(col=7,row=rowN)).value = unicode(val)\u000a                rowN+=1\u000a\u000a        ew.save(filename = fileName)\u000a        logging.info('saved data to %s' %fileName)\u000a\u000a    def saveAsPickle(self,fileName):\u000a        """Basically just saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded if necess and further analyses carried out.\u000a        """\u000a        if self.thisTrialN<1:\u000a            logging.debug('StairHandler.saveAsPickle called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        f = open(fileName+'.psydat', "wb")\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        logging.info('saved data to %s' %f.name)\u000a\u000a\u000aclass QuestHandler(StairHandler):\u000a    """Class that implements the Quest algorithm for quick measurement of\u000a    psychophysical thresholds.\u000a\u000a    Uses Andrew Straw's `QUEST <http://www.visionegg.org/Quest>`_, which is a\u000a    Python port of Denis Pelli's Matlab code.\u000a\u000a    Measures threshold using a Weibull psychometric function. Currently, it is\u000a    not possible to use a different psychometric function.\u000a\u000a    Threshold 't' is measured on an abstract 'intensity' scale, which\u000a    usually corresponds to log10 contrast.\u000a\u000a    The Weibull psychometric function:\u000a\u000a    p2=delta*gamma+(1-delta)*(1-(1-gamma)*exp(-10**(beta*(x2+xThreshold))))\u000a\u000a    **Example**::\u000a\u000a        # setup display/window\u000a        ...\u000a        # create stimulus\u000a        stimulus = visual.RadialStim(win=win, tex='sinXsin', size=1, pos=[0,0], units='deg')\u000a        ...\u000a        # create staircase object\u000a        # trying to find out the point where subject's response is 50/50\u000a        # if wanted to do a 2AFC then the defaults for pThreshold and gamma are good\u000a        staircase = data.QuestHandler(staircase._nextIntensity, 0.2, pThreshold=0.63, gamma=0.01,\u000a                                  nTrials=20, minVal=0, maxVal=1)\u000a        ...\u000a        while thisContrast in staircase:\u000a            # setup stimulus\u000a            stimulus.setContrast(thisContrast)\u000a            stimulus.draw()\u000a            win.flip()\u000a            core.wait(0.5)\u000a            # get response\u000a            ...\u000a            # inform QUEST of the response, needed to calculate next level\u000a            staircase.addData(thisResp)\u000a        ...\u000a        # can now access 1 of 3 suggested threshold levels\u000a        staircase.mean()\u000a        staircase.mode()\u000a        staircase.quantile() #gets the median\u000a\u000a    """\u000a    def __init__(self,\u000a                 startVal,\u000a                 startValSd,\u000a                 pThreshold=0.82,\u000a                 nTrials=None,\u000a                 stopInterval=None,\u000a                 method='quantile',\u000a                 stepType='log',\u000a                 beta=3.5,\u000a                 delta=0.01,\u000a                 gamma=0.5,\u000a                 grain=0.01,\u000a                 range=None,\u000a                 extraInfo=None,\u000a                 minVal=None,\u000a                 maxVal=None,\u000a                 staircase=None,\u000a                 originPath=None,\u000a                 name=''):\u000a        """\u000a        Typical values for pThreshold are:\u000a            * 0.82 which is equivalent to a 3 up 1 down standard staircase\u000a            * 0.63 which is equivalent to a 1 up 1 down standard staircase (and might want gamma=0.01)\u000a\u000a        The variable(s) nTrials and/or stopSd must be specified.\u000a\u000a        `beta`, `delta`, and `gamma` are the parameters of the Weibull psychometric function.\u000a\u000a        :Parameters:\u000a\u000a            startVal:\u000a                Prior threshold estimate or your initial guess threshold.\u000a\u000a            startValSd:\u000a                Standard deviation of your starting guess threshold. Be generous with the sd\u000a                as QUEST will have trouble finding the true threshold if it's more than one sd\u000a                from your initial guess.\u000a\u000a            pThreshold\u000a                Your threshold criterion expressed as probability of response==1. An intensity\u000a                offset is introduced into the psychometric function so that the threshold (i.e.,\u000a                the midpoint of the table) yields pThreshold..\u000a\u000a            nTrials: *None* or a number\u000a                The maximum number of trials to be conducted.\u000a\u000a            stopInterval: *None* or a number\u000a                The minimum 5-95% confidence interval required in the threshold estimate before stopping.\u000a                If both this and nTrials is specified, whichever happens first will determine when\u000a                Quest will stop.\u000a\u000a            method: *'quantile'*, 'mean', 'mode'\u000a                The method used to determine the next threshold to test. If you want to get a specific threshold\u000a                level at the end of your staircasing, please use the quantile, mean, and mode methods directly.\u000a\u000a            stepType: *'log'*, 'db', 'lin'\u000a                The type of steps that should be taken each time. 'db' and 'log' will transform your intensity levels\u000a                into decibels or log units and will move along the psychometric function with these values.\u000a\u000a            beta: *3.5* or a number\u000a                Controls the steepness of the psychometric function.\u000a\u000a            delta: *0.01* or a number\u000a                The fraction of trials on which the observer presses blindly.\u000a\u000a            gamma: *0.5* or a number\u000a                The fraction of trials that will generate response 1 when intensity=-Inf.\u000a\u000a            grain: *0.01* or a number\u000a                The quantization of the internal table.\u000a\u000a            range: *None*, or a number\u000a                The intensity difference between the largest and smallest intensity that the\u000a                internal table can store. This interval will be centered on the initial guess\u000a                tGuess. QUEST assumes that intensities outside of this range have zero prior\u000a                probability (i.e., they are impossible).\u000a\u000a            extraInfo:\u000a                A dictionary (typically) that will be stored along with collected data using\u000a                :func:`~psychopy.data.StairHandler.saveAsPickle` or\u000a                :func:`~psychopy.data.StairHandler.saveAsText` methods.\u000a\u000a            minVal: *None*, or a number\u000a                The smallest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            maxVal: *None*, or a number\u000a                The largest legal value for the staircase, which can be used to prevent it\u000a                reaching impossible contrast values, for instance.\u000a\u000a            staircase: *None* or StairHandler\u000a                Can supply a staircase object with intensities and results. Might be useful to\u000a                give the quest algorithm more information if you have it. You can also call the\u000a                importData function directly.\u000a\u000a        """\u000a\u000a        # Initialize using parent class first\u000a        StairHandler.__init__(self, startVal, nTrials=nTrials, extraInfo=extraInfo, method=method,\u000a                                stepType=stepType, minVal=minVal, maxVal=maxVal, name=name)\u000a\u000a        # Setup additional values\u000a        self.stopInterval = stopInterval\u000a\u000a        # Transform startVal and startValSd based on stepType\u000a        startVal = self._intensity2scale(startVal)\u000a        startValSd = self._intensity2scale(startValSd)\u000a        self._questNextIntensity = startVal\u000a\u000a        # Create Quest object\u000a        self._quest = QuestObject(startVal, startValSd, pThreshold, beta, delta, gamma, grain, range)\u000a\u000a        # Import any old staircase data\u000a        if staircase is not None:\u000a            self.importData(staircase.intensities, staircase.data)\u000a        #store the origin file and its path\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp=None\u000a\u000a    def addData(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        Supplying an `intensity` value here indicates that you did not use the\u000a        recommended intensity in your last trial and the staircase will\u000a        replace its recorded value with the one you supplied here.\u000a        """\u000a        # Process user supplied intensity\u000a        if intensity is None:\u000a            intensity = self._questNextIntensity\u000a        else:\u000a            intensity = self._intensity2scale(intensity)\u000a            #update the intensity\u000a            self.intensities.pop()#remove the one that had been auto-generated\u000a            self.intensities.append(intensity)\u000a        # Update quest\u000a        self._quest.update(intensity, result)\u000a        # Update other things\u000a        self.data.append(result)\u000a        if self.getExp()!=None:\u000a            self.getExp().addData('response', result)\u000a        self.calculateNextIntensity()\u000a\u000a    def importData(self, intensities, results):\u000a        """import some data which wasn't previously given to the quest algorithm"""\u000a        # NOT SURE ABOUT CLASS TO USE FOR RAISING ERROR\u000a        if len(intensities) != len(results):\u000a            raise AttributeError, "length of intensities and results input must be the same"\u000a        self.incTrials(len(intensities))\u000a        for intensity, result in zip(intensities,results):\u000a            try:\u000a                self.next()\u000a                self.addData(result, intensity)\u000a            except StopIteration:   # would get a stop iteration if stopInterval set\u000a                pass    # TODO: might want to check if nTrials is still good\u000a\u000a    def calculateNextIntensity(self):\u000a        """based on current intensity and counter of correct responses"""\u000a        self._intensity()\u000a        # Check we haven't gone out of the legal range\u000a        if (self._nextIntensity > self.maxVal) and self.maxVal is not None:\u000a            self._nextIntensity = self.maxVal\u000a        elif (self._nextIntensity < self.minVal) and self.minVal is not None:\u000a            self._nextIntensity = self.minVal\u000a        self._questNextIntensity = self._intensity2scale(self._nextIntensity)\u000a    def _intensity(self):\u000a        """assigns the next intensity level"""\u000a        if self.method == 'mean':\u000a            self._questNextIntensity = self._quest.mean()\u000a        elif self.method == 'mode':\u000a            self._questNextIntensity = self._quest.mode()\u000a        elif self.method == 'quantile':\u000a            self._questNextIntensity = self._quest.quantile()\u000a        # else: maybe raise an error\u000a        self._nextIntensity = self._scale2intensity(self._questNextIntensity)\u000a\u000a    def _intensity2scale(self, intensity):\u000a        """returns the scaled intensity level based on value of self.stepType"""\u000a        if self.stepType=='db':\u000a            scaled_intensity = numpy.log10(intensity) * 20.0\u000a        elif self.stepType=='log':\u000a            scaled_intensity = numpy.log10(intensity)\u000a        else:\u000a            scaled_intensity = intensity\u000a        return scaled_intensity\u000a\u000a    def _scale2intensity(self, scaled_intensity):\u000a        """returns the unscaled intensity level based on value of self.stepType"""\u000a        if self.stepType=='db':\u000a            intensity = 10.0**(scaled_intensity/20.0)\u000a        elif self.stepType=='log':\u000a            intensity = 10.0**scaled_intensity\u000a        else:\u000a            intensity = scaled_intensity\u000a        return intensity\u000a\u000a    def mean(self):\u000a        """mean of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.mean())\u000a\u000a    def sd(self):\u000a        """standard deviation of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.sd())\u000a\u000a    def mode(self):\u000a        """mode of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.mode()[0])\u000a\u000a    def quantile(self, p=None):\u000a        """quantile of Quest posterior pdf"""\u000a        return self._scale2intensity(self._quest.quantile(p))\u000a\u000a    def confInterval(self, getDifference=False):\u000a        """give the range of the 5-95% confidence interval"""\u000a        interval = [self.quantile(0.05), self.quantile(0.95)]\u000a        if getDifference:\u000a            return abs(interval[0] - interval[1])\u000a        else:\u000a            return interval\u000a\u000a    def incTrials(self, nNewTrials):\u000a        """increase maximum number of trials\u000a        Updates attribute: `nTrials`\u000a        """\u000a        self.nTrials += nNewTrials\u000a\u000a    def simulate(self, tActual):\u000a        """ returns a simulated user response to the next intensity level presented by Quest,\u000a            need to supply the actual threshold level\u000a        """\u000a        # Current estimated intensity level\u000a        if self.method == 'mean':\u000a            tTest = self._quest.mean()\u000a        elif self.method == 'mode':\u000a            tTest = self._quest.mode()\u000a        elif self.method == 'quantile':\u000a            tTest = self._quest.quantile()\u000a        return self._quest.simulate(tTest, tActual)\u000a\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a        Updates attributes; `thisTrial`, `thisTrialN`, `thisIndex`, `finished`, `intensities`\u000a\u000a        If the trials have ended, calling this method will raise a StopIteration error.\u000a        This can be handled with code such as::\u000a\u000a            staircase = QuestHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff\u000a\u000a        or::\u000a\u000a            staircase = QuestHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a        """\u000a        self._checkFinished()\u000a\u000a        if self.finished==False:\u000a            #update pointer for next trial\u000a            self.thisTrialN+=1\u000a            self.intensities.append(self._nextIntensity)\u000a            return self._nextIntensity\u000a        else:\u000a            self._terminate()\u000a\u000a    def _checkFinished(self):\u000a        """checks if we are finished\u000a        Updates attribute: `finished`\u000a        """\u000a        if self.nTrials is not None and len(self.intensities) >= self.nTrials:\u000a            self.finished = True\u000a        elif self.stopInterval is not None and self.confInterval(True) < self.stopInterval:\u000a            self.finished = True\u000a        else:\u000a            self.finished = False\u000a\u000a\u000aclass MultiStairHandler(_BaseTrialHandler):\u000a    def __init__(self, stairType='simple', method='random',\u000a            conditions=None, nTrials=50, originPath=None, name=''):\u000a        """A Handler to allow easy interleaved staircase procedures (simple or\u000a        QUEST).\u000a\u000a        Parameters for the staircases, as used by the relevant :class:`StairHandler` or\u000a        :class:`QuestHandler` (e.g. the `startVal`, `minVal`, `maxVal`...)\u000a        should be specified in the `conditions` list and may vary between\u000a        each staircase. In particular, the conditions /must/ include the\u000a        a `startVal` (because this is a required argument to the above handlers)\u000a        a `label` to tag the staircase and a `startValSd` (only for QUEST\u000a        staircases). Any parameters not specified in the conditions file\u000a        will revert to the default for that individual handler.\u000a\u000a        If you need to custom the behaviour further you may want to look at the\u000a        recipe on :ref:`interleavedStairs`.\u000a\u000a        :params:\u000a\u000a            stairType: 'simple' or 'quest'\u000a                Use a :class:`StairHandler` or :class:`QuestHandler`\u000a\u000a            method: 'random' or 'sequential'\u000a                The stairs are shuffled in each repeat but not randomised more than\u000a                that (so you can't have 3 repeats of the same staircase in a row\u000a                unless it's the only one still running)\u000a\u000a            conditions: a list of dictionaries specifying conditions\u000a                Can be used to control parameters for the different staicases.\u000a                Can be imported from an Excel file using `psychopy.data.importTrialTypes`\u000a                MUST include keys providing, 'startVal', 'label' and 'startValSd' (QUEST only).\u000a                The 'label' will be used in data file saving so should be unique.\u000a                See Example Usage below.\u000a\u000a            nTrials=50\u000a                Minimum trials to run (but may take more if the staircase hasn't\u000a                also met its minimal reversals. See `~psychopy.data.StairHandler`\u000a\u000a        Example usage::\u000a\u000a            conditions=[\u000a                {'label':'low', 'startVal': 0.1, 'ori':45},\u000a                {'label':'high','startVal': 0.8, 'ori':45},\u000a                {'label':'low', 'startVal': 0.1, 'ori':90},\u000a                {'label':'high','startVal': 0.8, 'ori':90},\u000a                ]\u000a            stairs = MultiStairHandler(conditions=conditions, nTrials=50)\u000a\u000a            for thisIntensity, thisCondition in stairs:\u000a                thisOri = thisCondition['ori']\u000a\u000a                #do something with thisIntensity and thisOri\u000a\u000a                stairs.addData(correctIncorrect)#this is ESSENTIAL\u000a\u000a            #save data as multiple formats\u000a            stairs.saveDataAsExcel(fileName)#easy to browse\u000a            stairs.saveAsPickle(fileName)#contains more info\u000a\u000a        """\u000a        self.name=name\u000a        self.type=stairType\u000a        self.method=method #'random' or 'sequential'\u000a        self.conditions=conditions\u000a        self.nTrials=nTrials\u000a        self.finished=False\u000a        self.totalTrials=0\u000a        self._checkArguments()\u000a        #create staircases\u000a        self.staircases=[]#all staircases\u000a        self.runningStaircases=[]#staircases that haven't finished yet\u000a        self.thisPassRemaining=[]#staircases to run this pass\u000a        self._createStairs()\u000a\u000a        #fetch first staircase/value (without altering/advancing it)\u000a        self._startNewPass()\u000a        self.currentStaircase = self.thisPassRemaining[0]#take the first and remove it\u000a        self._nextIntensity = self.currentStaircase._nextIntensity#gets updated by self.addData()\u000a        #store the origin file and its path\u000a        self.originPath, self.origin = self.getOriginPathAndFile(originPath)\u000a        self._exp = None#the experiment handler that owns me!\u000a    def _checkArguments(self):\u000a        #did we get a conditions parameter, correctly formatted\u000a        if type(self.conditions) not in [list]:\u000a            logging.error('conditions parameter to MultiStairHandler should be a list, not a %s' %type(self.conditions))\u000a            return\u000a        c0=self.conditions[0]\u000a        if type(c0)!=dict:\u000a            logging.error('conditions to MultiStairHandler should be a list of python dictionaries' + \u005c\u000a                ', not a list of %ss' %type(c0))\u000a        #did conditions contain the things we need?\u000a        params = c0.keys()\u000a        if self.type in ['simple','quest']:\u000a            if 'startVal' not in params:\u000a                logging.error('MultiStairHandler needs a param called `startVal` in conditions')\u000a            if 'label' not in params:\u000a                logging.error('MultiStairHandler needs a param called `label` in conditions')\u000a            if 'startValSd' not in params and self.type=='quest':\u000a                logging.error("MultiStairHandler('quest') needs a param called `startValSd` in conditions")\u000a        else:\u000a            logging.error("MultiStairHandler `stairType` should be 'simple' or 'quest', not '%s'" %self.type)\u000a    def _createStairs(self):\u000a        if self.type=='simple':\u000a            defaults = {'nReversals':None, 'stepSizes':4, 'nTrials':self.nTrials,\u000a                'nUp':1, 'nDown':3, 'extraInfo':None,\u000a                'stepType':'db', 'minVal':None, 'maxVal':None}\u000a        elif self.type=='quest':\u000a            defaults = {'pThreshold':0.82, 'nTrials':self.nTrials, 'stopInterval':None,\u000a                'method':'quantile', 'stepType':'log', 'beta':3.5, 'delta':0.01,\u000a                'gamma':0.5, 'grain':0.01, 'range':None, 'extraInfo':None,\u000a                'minVal':None, 'maxVal':None, 'staircase':None}\u000a\u000a        for condition in self.conditions:\u000a            startVal=condition['startVal']\u000a            #fetch each params from conditions if possible\u000a            for paramName in defaults:\u000a                #get value for the parameter\u000a                if paramName in condition.keys(): val=condition[paramName]\u000a                else: val = defaults[paramName]\u000a                #assign value to variable name\u000a                exec('%s=%s' %(paramName, repr(val)))\u000a            #then create actual staircase\u000a            if self.type=='simple':\u000a                thisStair = StairHandler(startVal, nReversals=nReversals,\u000a                    stepSizes=stepSizes, nTrials=nTrials, nUp=nUp, nDown=nDown,\u000a                    extraInfo=extraInfo,\u000a                    stepType=stepType, minVal=minVal, maxVal=maxVal)\u000a            elif self.type=='quest':\u000a                thisStair = QuestHandler(startVal, startValSd=condition['startValSd'],\u000a                    pThreshold=pThreshold, nTrials=nTrials, stopInterval=stopInterval,\u000a                    method=method, stepType=stepType, beta=beta, delta=delta,\u000a                    gamma=gamma, grain=grain, range=range, extraInfo=extraInfo,\u000a                    minVal=minVal, maxVal=maxVal, staircase=staircase)\u000a            thisStair.condition = condition#this isn't normally part of handler\u000a            #and finally, add it to the list\u000a            self.staircases.append(thisStair)\u000a            self.runningStaircases.append(thisStair)\u000a    def __iter__(self):\u000a        return self\u000a    def next(self):\u000a        """Advances to next trial and returns it.\u000a\u000a        This can be handled with code such as::\u000a\u000a            staircase = MultiStairHandler(.......)\u000a            for eachTrial in staircase:#automatically stops when done\u000a                #do stuff here for the trial\u000a\u000a        or::\u000a\u000a            staircase = MultiStairHandler(.......)\u000a            while True: #ie forever\u000a                try:\u000a                    thisTrial = staircase.next()\u000a                except StopIteration:#we got a StopIteration error\u000a                    break #break out of the forever loop\u000a                #do stuff here for the trial\u000a\u000a        """\u000a        #create a new set for this pass if needed\u000a        if not hasattr(self, 'thisPassRemaining') or self.thisPassRemaining==[]:\u000a            if len(self.runningStaircases)>0:\u000a                self._startNewPass()\u000a            else:\u000a                self.finished=True\u000a                raise StopIteration\u000a        #fetch next staircase/value\u000a        self.currentStaircase = self.thisPassRemaining.pop(0)#take the first and remove it\u000a        self._nextIntensity = self.currentStaircase._nextIntensity#gets updated by self.addData()\u000a        #return value\u000a        if self.finished==False:\u000a            return self._nextIntensity, self.currentStaircase.condition\u000a        else:\u000a            raise StopIteration\u000a\u000a    def _startNewPass(self):\u000a        """Create a new iteration of the running staircases for this pass.\u000a\u000a        This is not normally needed byt he user - it gets called at __init__\u000a        and every time that next() runs out of trials for this pass.\u000a        """\u000a        self.thisPassRemaining = copy.copy(self.runningStaircases)\u000a        if self.method=='random': numpy.random.shuffle(self.thisPassRemaining)\u000a    def addData(self, result, intensity=None):\u000a        """Add a 1 or 0 to signify a correct/detected or incorrect/missed trial\u000a\u000a        This is essential to advance the staircase to a new intensity level!\u000a        """\u000a        self.currentStaircase.addData(result)\u000a        if self.getExp()!=None:#update the experiment handler too\u000a            self.getExp().addData('response', result)\u000a        try:\u000a            self.currentStaircase.next()\u000a        except:\u000a            self.runningStaircases.remove(self.currentStaircase)\u000a        self.totalTrials+=1\u000a    def saveAsPickle(self, fileName):\u000a        """Saves a copy of self (with data) to a pickle file.\u000a\u000a        This can be reloaded later and further analyses carried out.\u000a        """\u000a        if self.totalTrials<1:\u000a            logging.debug('StairHandler.saveAsPickle called but no trials completed. Nothing saved')\u000a            return -1\u000a        #otherwise use default location\u000a        f = open(fileName+'.psydat', "wb")\u000a        cPickle.dump(self, f)\u000a        f.close()\u000a        logging.info('saved data to %s' %f.name)\u000a    def saveAsExcel(self, fileName, matrixOnly=False, appendFile=False):\u000a        """\u000a        Save a summary data file in Excel OpenXML format workbook (:term:`xlsx`) for processing\u000a        in most spreadsheet packages. This format is compatible with\u000a        versions of Excel (2007 or greater) and and with OpenOffice (>=3.0).\u000a\u000a        It has the advantage over the simpler text files (see :func:`TrialHandler.saveAsText()` )\u000a        that the data from each staircase will be save in the same file, with\u000a        the sheet name coming from the 'label' given in the dictionary of\u000a        conditions during initialisation of the Handler.\u000a\u000a        The file extension `.xlsx` will be added if not given already.\u000a\u000a        The file will contain a set of values specifying the staircase level ('intensity') at each\u000a        reversal, a list of reversal indices (trial numbers), the raw staircase/intensity\u000a        level on *every* trial and the corresponding responses of the participant on every trial.\u000a\u000a        :Parameters:\u000a\u000a            fileName: string\u000a                the name of the file to create or append. Can include relative or absolute path\u000a\u000a            matrixOnly: True or False\u000a                If set to True then only the data itself will be output (no additional info)\u000a\u000a            appendFile: True or False\u000a                If False any existing file with this name will be overwritten. If True then a new worksheet will be appended.\u000a                If a worksheet already exists with that name a number will be added to make it unique.\u000a\u000a        """\u000a        if self.totalTrials<1:\u000a            logging.debug('StairHandler.saveAsExcel called but no trials completed. Nothing saved')\u000a            return -1\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            if stairN==0: append=appendFile\u000a            else: append=True\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            thisStair.saveAsExcel(fileName=fileName, sheetName=label,\u000a                matrixOnly=False, appendFile=append)\u000a    def saveAsText(self,fileName,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False):\u000a        """\u000a        Write out text files with the data.\u000a\u000a        For MultiStairHandler this will output one file for each staircase\u000a        that was run, with _label added to the fileName that you specify above\u000a        (label comes from the condition dictionary you specified when you\u000a        created the Handler).\u000a\u000a        :Parameters:\u000a\u000a            fileName: a string\u000a                The name of the file, including path if needed. The extension\u000a                `.dlm` will be added if not included.\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a        if self.totalTrials<1:\u000a            logging.debug('StairHandler.saveAsText called but no trials completed. Nothing saved')\u000a            return -1\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            thisFileName = fileName+"_"+label\u000a            thisStair.saveAsText(fileName=thisFileName, delim=delim,\u000a                matrixOnly=matrixOnly)\u000a    def printAsText(self,\u000a                   delim='\u005ct',\u000a                   matrixOnly=False):\u000a        """\u000a        Write the data to the standard output stream\u000a\u000a        :Parameters:\u000a\u000a            delim: a string\u000a                the delimitter to be used (e.g. '\u005ct' for tab-delimitted, ',' for csv files)\u000a\u000a            matrixOnly: True/False\u000a                If True, prevents the output of the `extraInfo` provided at initialisation.\u000a        """\u000a        nStairs=len(self.staircases)\u000a        for stairN, thisStair in enumerate(self.staircases):\u000a            if stairN<(nStairs-1): thisMatrixOnly=True #never print info for first files\u000a            else: thisMatrixOnly = matrixOnly\u000a            #make a filename\u000a            label = thisStair.condition['label']\u000a            print "\u005cn%s:" %label\u000a            thisStair.saveAsText(fileName='stdout', delim=delim,\u000a                matrixOnly=thisMatrixOnly)\u000a\u000aclass DataHandler(dict):\u000a    """For handling data (used by TrialHandler, principally, rather than\u000a    by users directly)\u000a\u000a    Numeric data are stored as numpy masked arrays where the mask is set True for missing entries.\u000a    When any non-numeric data (string, list or array) get inserted using DataHandler.add(val) the array\u000a    is converted to a standard (not masked) numpy array with dtype='O' and where missing entries have\u000a    value="--"\u000a\u000a    Attributes:\u000a        - ['key']=data arrays containing values for that key\u000a            (e.g. data['accuracy']=...)\u000a        - dataShape=shape of data (x,y,...z,nReps)\u000a        - dataTypes=list of keys as strings\u000a\u000a    """\u000a    def __init__(self, dataTypes=None, trials=None, dataShape=None):\u000a        self.trials=trials\u000a        self.dataTypes=[]#names will be added during addDataType\u000a        self.isNumeric={}\u000a        #if given dataShape use it - otherwise guess!\u000a        if dataShape: self.dataShape=dataShape\u000a        elif self.trials:\u000a            self.dataShape=list(numpy.asarray(trials.trialList,'O').shape)\u000a            self.dataShape.append(trials.nReps)\u000a\u000a        #initialise arrays now if poss\u000a        if dataTypes and self.dataShape:\u000a            for thisType in dataTypes:\u000a                self.addDataType(thisType)\u000a\u000a    def addDataType(self, names, shape=None):\u000a        """Add a new key to the data dictionary of\u000a        particular shape if specified (otherwise the\u000a        shape of the trial matrix in the trial handler.\u000a        Data are initialised to be zero everywhere.\u000a        Not needed by user: appropriate types will be added\u000a        during initialisation and as each xtra type is needed.\u000a        """\u000a        if not shape: shape = self.dataShape\u000a        if not isinstance(names,basestring):\u000a            #recursively call this function until we have a string\u000a            for thisName in names: self.addDataType(thisName)\u000a        else:\u000a            #create the appropriate array in the dict\u000a            #initially use numpy masked array of floats with mask=True for missing vals\u000a            #convert to a numpy array with dtype='O' if non-numeric data given\u000a            #NB don't use masked array with dytpe='O' together -they don't unpickle\u000a            self[names]=numpy.ma.zeros(shape,'f')#masked array of floats\u000a            self[names].mask=True\u000a            #add the name to the list\u000a            self.dataTypes.append(names)\u000a            self.isNumeric[names]=True#until we need otherwise\u000a    def add(self, thisType, value, position=None):\u000a        """Add data to an existing data type\u000a        (and add a new one if necess)\u000a        """\u000a        if not self.has_key(thisType):\u000a            self.addDataType(thisType)\u000a        if position==None:\u000a            #'ran' is always the first thing to update\u000a            if thisType=='ran':\u000a                repN = sum(self['ran'][self.trials.thisIndex])\u000a            else:\u000a                repN = sum(self['ran'][self.trials.thisIndex])-1#because it has already been updated\u000a            #make a list where 1st digit is trial number\u000a            position= [self.trials.thisIndex]\u000a            position.append(repN)\u000a\u000a        #check whether data falls within bounds\u000a        posArr = numpy.asarray(position)\u000a        shapeArr = numpy.asarray(self.dataShape)\u000a        if not numpy.alltrue(posArr<shapeArr):\u000a            #array isn't big enough\u000a            logging.warning('need a bigger array for:'+thisType)\u000a            self[thisType]=misc.extendArr(self[thisType],posArr)#not implemented yet!\u000a        #check for ndarrays with more than one value and for non-numeric data\u000a        if self.isNumeric[thisType] and \u005c\u000a            ((type(value)==numpy.ndarray and len(value)>1) or (type(value) not in [float, int])):\u000a                self._convertToObjectArray(thisType)\u000a        #insert the value\u000a        self[thisType][position[0],position[1]]=value\u000a    def _convertToObjectArray(self, thisType):\u000a        """Convert this datatype from masked numeric array to unmasked object array\u000a        """\u000a        dat = self[thisType]\u000a        self[thisType] = numpy.array(dat.data, dtype='O')#create an array of Object type\u000a        #masked vals should be "--", others keep data\u000a        self[thisType] = numpy.where(dat.mask, '--',dat).astype('O')#we have to repeat forcing to 'O' or text gets truncated to 4chars\u000a        self.isNumeric[thisType]=False\u000a\u000aclass FitFunction:\u000a    """Deprecated - use the specific functions; FitWeibull, FitLogistic...\u000a    """\u000a\u000a    def __init__(self, fnName, xx, yy, sems=1.0, guess=None, display=1,\u000a                 expectedMin=0.5):\u000a        self.fnName = fnName\u000a        self.xx = numpy.asarray(xx)\u000a        self.yy = numpy.asarray(yy)\u000a        self.sems = numpy.asarray(sems)\u000a        self.params = guess\u000a        self.display=display\u000a        # for holding error calculations:\u000a        self.ssq=0\u000a        self.rms=0\u000a        self.chi=0\u000a\u000a        if fnName[-4:] in ['2AFC', 'TAFC']:\u000a            self.expectedMin = 0.5\u000a        elif fnName[-2:] =='YN':\u000a            self.expectedMin=0.0\u000a        else:\u000a            self.expectedMin=expectedMin\u000a\u000a        #do the calculations:\u000a        self._doFit()\u000a\u000a    def _doFit(self):\u000a        #get some useful variables to help choose starting fit vals\u000a        xMin = min(self.xx); xMax = max(self.xx)\u000a        xRange=xMax-xMin; xMean= (xMax+xMin)/2.0\u000a        if self.fnName in ['weibullTAFC','weibullYN']:\u000a            if self.params==None: guess=[xMean, xRange/5.0]\u000a            else: guess= numpy.asarray(self.params,'d')\u000a        elif self.fnName in ['cumNorm','erf']:\u000a            if self.params==None: guess=[xMean, xRange/5.0]#c50, xScale (slope)\u000a            else: guess= numpy.asarray(self.params,'d')\u000a        elif self.fnName in ['logisticTAFC','logistYN', 'logistic']:\u000a            if self.params==None: guess=[xMin, 5.0/xRange]#x0, xRate\u000a            else: guess= numpy.asarray(self.params,'d')\u000a        elif self.fnName in ['nakaRush', 'nakaRushton', 'NR']:\u000a            if self.params==None: guess=[xMean, 2.0]#x50, expon\u000a            else: guess= numpy.asarray(self.params,'d')\u000a\u000a        self.params = optimize.fmin_cg(self._getErr, guess, None, (self.xx,self.yy,self.sems),disp=self.display)\u000a        self.ssq = self._getErr(self.params, self.xx, self.yy, 1.0)\u000a        self.chi = self._getErr(self.params, self.xx, self.yy, self.sems)\u000a        self.rms = self.ssq/len(self.xx)\u000a\u000a    def _getErr(self, params, xx,yy,sems):\u000a        mod = self.eval(xx, params)\u000a        err = sum((yy-mod)**2/sems)\u000a        return err\u000a\u000a    def eval(self, xx=None, params=None):\u000a        if xx==None: xx=self.xx\u000a        if params==None: params=self.params\u000a        if self.fnName in ['weibullTAFC', 'weibull2AFC']:\u000a            alpha = params[0];\u000a            if alpha<=0: alpha=0.001\u000a            beta = params[1]\u000a            xx = numpy.asarray(xx)\u000a            yy =  1.0 - 0.5*numpy.exp( - (xx/alpha)**beta )\u000a        elif self.fnName == 'weibullYN':\u000a            alpha = params[0];\u000a            if alpha<=0: alpha=0.001\u000a            beta = params[1]\u000a            xx = numpy.asarray(xx)\u000a            yy =  1.0 - numpy.exp( - (xx/alpha)**beta )\u000a        elif self.fnName in ['nakaRush', 'nakaRushton', 'NR']:\u000a            c50 = params[0]\u000a            if c50<=0: c50=0.001\u000a            n = params[1]\u000a            if n<=0: n=0.001\u000a            xx = numpy.asarray(xx)\u000a            yy = rMax*(xx**n/(xx**n+c50**n))\u000a        elif self.fnName in [ 'erf', 'cumNorm']:\u000a            xShift = params[0]\u000a            xScale = params[1]\u000a            if xScale<=0: xScale=0.001\u000a            xx = numpy.asarray(xx)\u000a            yy = special.erf(xx*xScale - xShift)*0.5+0.5#numpy.special.erf() goes from -1:1\u000a        elif self.fnName in [ 'logisticYN', 'logistYN']:\u000a            x0 = params[0]\u000a            xRate = params[1]\u000a            if xRate<=0: xRate=0.001\u000a            xx = numpy.asarray(xx)\u000a            yy = 1.0/(1+(1.0/x0-1)*numpy.exp(-xRate*xx))\u000a        return yy\u000a\u000a    def inverse(self, yy, params=None):\u000a        """Returns fitted xx for any given yy value(s).\u000a\u000a        If params is specified this will override the current model params.\u000a        """\u000a        yy = numpy.asarray(yy)\u000a        if params==None: params=self.params\u000a        if self.fnName== 'weibullTAFC':\u000a            alpha = params[0]\u000a            beta = params[1]\u000a            xx = alpha * (-numpy.log(2.0 * (1.0-yy))) **(1.0/beta)\u000a        elif self.fnName== 'weibullYN':\u000a            alpha = params[0]\u000a            beta = params[1]\u000a            xx = alpha * (-numpy.log(1.0-yy))**(1.0/beta)\u000a        elif self.fnName in [ 'erf', 'cumNorm']:\u000a            xShift = params[0]\u000a            xScale = params[1]\u000a            xx = (special.erfinv(yy*2.0-1.0)+xShift)/xScale\u000a        elif self.fnName in [ 'logisticYN', 'logistYN']:\u000a            x0 = params[0]\u000a            xRate = params[1]\u000a            xx = -numpy.log( (1/yy-1)/(1/x0-1) )/xRate\u000a        elif self.fnName in ['nakaRush', 'nakaRushton', 'NR']:\u000a            c50 = params[0]\u000a            n = params[1]\u000a            xx = c50/(1/yy-1)\u000a        return xx\u000a\u000aclass _baseFunctionFit:\u000a    """Not needed by most users except as a superclass for developping your own functions\u000a\u000a    You must overide the eval and inverse methods and a good idea to overide the _initialGuess\u000a    method aswell.\u000a    """\u000a\u000a    def __init__(self, xx, yy, sems=1.0, guess=None, display=1,\u000a                 expectedMin=0.5):\u000a        self.xx = numpy.asarray(xx)\u000a        self.yy = numpy.asarray(yy)\u000a        self.sems = numpy.asarray(sems)\u000a        self.expectedMin = expectedMin\u000a        self.display=display\u000a        # for holding error calculations:\u000a        self.ssq=0\u000a        self.rms=0\u000a        self.chi=0\u000a        #initialise parameters\u000a        if guess==None:\u000a            self.params = self._initialGuess()\u000a        else:\u000a            self.params = guess\u000a\u000a        #do the calculations:\u000a        self._doFit()\u000a\u000a    def _doFit(self):\u000a        #get some useful variables to help choose starting fit vals\u000a        self.params = optimize.fmin_powell(self._getErr, self.params, (self.xx,self.yy,self.sems),disp=self.display)\u000a#        self.params = optimize.fmin_bfgs(self._getErr, self.params, None, (self.xx,self.yy,self.sems),disp=self.display)\u000a        self.ssq = self._getErr(self.params, self.xx, self.yy, 1.0)\u000a        self.chi = self._getErr(self.params, self.xx, self.yy, self.sems)\u000a        self.rms = self.ssq/len(self.xx)\u000a\u000a    def _initialGuess(self):\u000a        xMin = min(self.xx); xMax = max(self.xx)\u000a        xRange=xMax-xMin; xMean= (xMax+xMin)/2.0\u000a        guess=[xMean, xRange/5.0]\u000a        return guess\u000a\u000a    def _getErr(self, params, xx,yy,sems):\u000a        mod = self.eval(xx, params)\u000a        err = sum((yy-mod)**2/sems)\u000a        return err\u000a\u000a    def eval(self, xx=None, params=None):\u000a        """Returns fitted yy for any given xx value(s).\u000a        Uses the original xx values (from which fit was calculated)\u000a        if none given.\u000a\u000a        If params is specified this will override the current model params."""\u000a        yy=xx\u000a        return yy\u000a\u000a    def inverse(self, yy, params=None):\u000a        """Returns fitted xx for any given yy value(s).\u000a\u000a        If params is specified this will override the current model params.\u000a        """\u000a        #define the inverse for your function here\u000a        xx=yy\u000a        return xx\u000a\u000a\u000aclass FitWeibull(_baseFunctionFit):\u000a    """Fit a Weibull function (either 2AFC or YN)\u000a    of the form::\u000a\u000a        y = chance + (1.0-chance)*(1-exp( -(xx/alpha)**(beta) ))\u000a\u000a    and with inverse::\u000a\u000a        x = alpha * (-log((1.0-y)/(1-chance)))**(1.0/beta)\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[alpha, beta]``)"""\u000a    def eval(self, xx=None, params=None):\u000a        if params==None:  params=self.params #so the user can set params for this particular eval\u000a        alpha = params[0];\u000a        if alpha<=0: alpha=0.001\u000a        beta = params[1]\u000a        xx = numpy.asarray(xx)\u000a        yy =  self.expectedMin + (1.0-self.expectedMin)*(1-numpy.exp( -(xx/alpha)**(beta) ))\u000a        return yy\u000a    def inverse(self, yy, params=None):\u000a        if params==None: params=self.params #so the user can set params for this particular inv\u000a        alpha = params[0]\u000a        beta = params[1]\u000a        xx = alpha * (-numpy.log((1.0-yy)/(1-self.expectedMin))) **(1.0/beta)\u000a        return xx\u000aclass FitNakaRushton(_baseFunctionFit):\u000a    """Fit a Naka-Rushton function\u000a    of the form::\u000a\u000a        yy = rMin + (rMax-rMin) * xx**n/(xx**n+c50**n)\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[rMin, rMax, c50, n]``)\u000a\u000a    Note that this differs from most of the other functions in\u000a    not using a value for the expected minimum. Rather, it fits this\u000a    as one of the parameters of the model."""\u000a    def __init__(self, xx, yy, sems=1.0, guess=None, display=1):\u000a        self.xx = numpy.asarray(xx)\u000a        self.yy = numpy.asarray(yy)\u000a        self.sems = numpy.asarray(sems)\u000a        self.display=display\u000a        # for holding error calculations:\u000a        self.ssq=0\u000a        self.rms=0\u000a        self.chi=0\u000a        #initialise parameters\u000a        if guess==None:\u000a            self.params = self._initialGuess()\u000a        else:\u000a            self.params = guess\u000a\u000a        #do the calculations:\u000a        self._doFit()\u000a    def _initialGuess(self):\u000a        xMin = min(self.xx); xMax = max(self.xx)\u000a        xRange=xMax-xMin; xMean= (xMax+xMin)/2.0\u000a        guess=[xMean, 2.0, min(self.yy), max(self.yy)-min(self.yy)]\u000a        return guess\u000a    def eval(self, xx=None, params=None):\u000a        if params==None:  params=self.params #so the user can set params for this particular eval\u000a        c50 = params[0]\u000a        n = params[1]\u000a        rMin = params[2]\u000a        rMax = params[3]\u000a        #all params should be >0\u000a        if c50<=0: c50=0.001\u000a        if n<=0: n=0.001\u000a        if rMax<=0: n=0.001\u000a        if rMin<=0: n=0.001\u000a\u000a        xx = numpy.asarray(xx)\u000a        yy = rMin + (rMax-rMin)*(xx**n/(xx**n+c50**n))\u000a        #yy = (xx**n/(xx**n+c50**n))\u000a        return yy\u000a\u000a    def inverse(self, yy, params=None):\u000a        if params==None: params=self.params #so the user can set params for this particular inv\u000a        yy=numpy.asarray(yy)\u000a        c50 = params[0]\u000a        n = params[1]\u000a        rMin = params[2]\u000a        rMax = params[3]\u000a\u000a        yScaled = (yy-rMin)/(rMax-rMin) #remove baseline and scale\u000a        xx = (yScaled*c50**n/(1-yScaled))**(1/n)\u000a        return xx\u000a\u000aclass FitLogistic(_baseFunctionFit):\u000a    """Fit a Logistic function (either 2AFC or YN)\u000a    of the form::\u000a\u000a        y = chance + (1-chance)/(1+exp((PSE-xx)*JND))\u000a\u000a    and with inverse::\u000a\u000a        x = PSE - log((1-chance)/(yy-chance) - 1)/JND\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with ``fit.eval(x)``, retrieve the inverse of the function with\u000a    ``fit.inverse(y)`` or retrieve the parameters from ``fit.params``\u000a    (a list with ``[PSE, JND]``)\u000a    """\u000a    def eval(self, xx=None, params=None):\u000a        if params==None:  params=self.params #so the user can set params for this particular eval\u000a        PSE = params[0]\u000a        JND = params[1]\u000a        chance = self.expectedMin\u000a        xx = numpy.asarray(xx)\u000a        yy = chance + (1-chance)/(1+numpy.exp((PSE-xx)*JND))\u000a        return yy\u000a    def inverse(self, yy, params=None):\u000a        if params==None: params=self.params #so the user can set params for this particular inv\u000a        PSE = params[0]\u000a        JND = params[1]\u000a        chance = self.expectedMin\u000a        yy = numpy.asarray(yy)\u000a        xx = PSE - numpy.log((1-chance)/(yy-chance) - 1)/JND\u000a        return xx\u000a\u000aclass FitCumNormal(_baseFunctionFit):\u000a    """Fit a Cumulative Normal function (aka error function or erf)\u000a    of the form::\u000a\u000a        y = chance + (1-chance)*(special.erf(xx*xScale - xShift)/2.0+0.5)\u000a\u000a    and with inverse::\u000a\u000a        x = (erfinv((yy-chance)/(1-chance)*2.0-1)+xShift)/xScale\u000a\u000a    After fitting the function you can evaluate an array of x-values\u000a    with fit.eval(x), retrieve the inverse of the function with\u000a    fit.inverse(y) or retrieve the parameters from fit.params\u000a    (a list with [centre, sd] for the Gaussian distribution forming the cumulative)\u000a\u000a    NB: Prior to version 1.74 the parameters had different meaning, relating\u000a    to xShift and slope of the function (similar to 1/sd). Although that is more in\u000a    with the parameters for the Weibull fit, for instance, it is less in keeping\u000a    with standard expectations of normal (Gaussian distributions) so in version\u000a    1.74.00 the parameters became the [centre,sd] of the normal distribution.\u000a\u000a    """\u000a    def eval(self, xx=None, params=None):\u000a        if params==None:  params=self.params #so the user can set params for this particular eval\u000a        xShift = params[0]\u000a        sd = params[1]\u000a        chance = self.expectedMin\u000a        #if xScale<=0: xScale=0.001\u000a        xx = numpy.asarray(xx)\u000a        yy = chance + (1-chance)*(special.erf((xx-xShift)/sd)/2.0+0.5)#NB numpy.special.erf() goes from -1:1\u000a        return yy\u000a    def inverse(self, yy, params=None):\u000a        if params==None: params=self.params #so the user can set params for this particular inv\u000a        xShift = params[0]\u000a        sd = params[1]\u000a        chance = self.expectedMin\u000a        #xx = (special.erfinv((yy-chance)/(1-chance)*2.0-1)+xShift)/xScale#NB numpy.special.erfinv() goes from -1:1\u000a        xx = xShift+sd*special.erfinv(( (yy-chance)/(1-chance) - 0.5 )*2)\u000a        return xx\u000a\u000a\u000a\u000a########################## End psychopy.data classes ##########################\u000a\u000adef bootStraps(dat, n=1):\u000a    """Create a list of n bootstrapped resamples of the data\u000a\u000a    SLOW IMPLEMENTATION (Python for-loop)\u000a\u000a    Usage:\u000a        ``out = bootStraps(dat, n=1)``\u000a\u000a    Where:\u000a        dat\u000a            an NxM or 1xN array (each row is a different condition, each column is a different trial)\u000a        n\u000a            number of bootstrapped resamples to create\u000a\u000a        out\u000a            - dim[0]=conditions\u000a            - dim[1]=trials\u000a            - dim[2]=resamples\u000a    """\u000a    dat = numpy.asarray(dat)\u000a    if len(dat.shape)==1: #have presumably been given a series of data for one stimulus\u000a        dat=numpy.array([dat])#adds a dimension (arraynow has shape (1,Ntrials))\u000a\u000a    nTrials = dat.shape[1]\u000a    #initialise a matrix to store output\u000a    resamples = numpy.zeros(dat.shape+(n,), dat.dtype)\u000a    for stimulusN in range(dat.shape[0]):\u000a        thisStim = dat[stimulusN,:]#fetch data for this stimulus\u000a        for sampleN in range(n):\u000a            indices = numpy.floor(nTrials*numpy.random.rand(nTrials)).astype('i')\u000a            resamples[stimulusN,:,sampleN] = numpy.take(thisStim, indices)\u000a    return resamples\u000a\u000adef functionFromStaircase(intensities, responses, bins = 10):\u000a    """Create a psychometric function by binning data from a staircase procedure\u000a\u000a    usage::\u000a\u000a        [intensity, meanCorrect, n] = functionFromStaircase(intensities, responses, bins)\u000a\u000a    where:\u000a            intensities\u000a                are a list of intensities to be binned\u000a\u000a            responses\u000a                are a list of 0,1 each corresponding to the equivalent intensity value\u000a\u000a            bins\u000a                can be an integer (giving that number of bins) or 'unique' (where each bin is made from ALL data for exactly one intensity value)\u000a\u000a            intensity\u000a                is the center of an intensity bin\u000a\u000a            meanCorrect\u000a                is mean % correct in that bin\u000a\u000a            n\u000a                is number of responses contributing to that mean\u000a    """\u000a    #convert to arrays\u000a    try:#concatenate if multidimensional\u000a        intensities = numpy.concatenate(intensities)\u000a        responses = numpy.concatenate(responses)\u000a    except:\u000a        intensities = numpy.array(intensities)\u000a        responses = numpy.array(responses)\u000a\u000a    #sort the responses\u000a    sort_ii = numpy.argsort(intensities)\u000a    sortedInten = numpy.take(intensities, sort_ii)\u000a    sortedResp = numpy.take(responses, sort_ii)\u000a\u000a    binnedResp=[]; binnedInten=[]; nPoints = []\u000a    if bins=='unique':\u000a        intensities = numpy.round(intensities, decimals=8)\u000a        uniqueIntens=numpy.unique(intensities)\u000a        for thisInten in uniqueIntens:\u000a            theseResps = responses[intensities==thisInten]\u000a            binnedInten.append(thisInten)\u000a            binnedResp.append(numpy.mean(theseResps))\u000a            nPoints.append(len(theseResps))\u000a    else:\u000a        pointsPerBin = len(intensities)/float(bins)\u000a        for binN in range(bins):\u000a            thisResp = sortedResp[int(round(binN*pointsPerBin)) : int(round((binN+1)*pointsPerBin))]\u000a            thisInten = sortedInten[int(round(binN*pointsPerBin)) : int(round((binN+1)*pointsPerBin))]\u000a\u000a            binnedResp.append( numpy.mean(thisResp))\u000a            binnedInten.append( numpy.mean(thisInten))\u000a            nPoints.append( len(thisInten) )\u000a\u000a    return binnedInten, binnedResp, nPoints\u000a\u000adef getDateStr(format="%Y_%b_%d_%H%M"):\u000a    """Uses ``time.strftime()``_ to generate a string of the form\u000a    2012_Apr_19_1531 for 19th April 3.31pm, 2012.\u000a    This is often useful appended to data filenames to provide unique names.\u000a    To include the year: getDateStr(format="%Y_%b_%d_%H%M") returns '2011_Mar_16_1307'\u000a    depending on locale, can have unicode chars in month names, so utf_8_decode them\u000a    For date in the format of the current localization, do:\u000a        data.getDateStr(format=locale.nl_langinfo(locale.D_T_FMT))\u000a    """\u000a    now = time.strftime(format, time.localtime())\u000a    try:\u000a        now_dec = codecs.utf_8_decode(now)[0]\u000a    except UnicodeDecodeError:\u000a        now_dec = time.strftime("%Y_%m_%d_%H%M", time.localtime())  # '2011_03_16_1307'\u000a\u000a    return now_dec\u000a\u000adef isValidVariableName(name):\u000a    """Checks whether a certain string could be used as a valid variable.\u000a\u000a    Usage::\u000a\u000a        OK, msg = isValidVariableName(name)\u000a\u000a    >>> isValidVariableName('name')\u000a    (True, '')\u000a    >>> isValidVariableName('0name')\u000a    (False, 'Variables cannot begin with numeric character')\u000a    >>> isValidVariableName('first second')\u000a    (False, 'Variables cannot contain punctuation or spaces')\u000a    >>> isValidVariableName('')\u000a    (False, "Variables cannot be missing, None, or ''")\u000a    >>> isValidVariableName(None)\u000a    (False, "Variables cannot be missing, None, or ''")\u000a    >>> isValidVariableName(23)\u000a    (False, "Variables must be string-like")\u000a    >>> isValidVariableName('a_b_c')\u000a    (True, '')\u000a    """\u000a    if not name:\u000a        return False, "Variables cannot be missing, None, or ''"\u000a    if not type(name) in [str, unicode, numpy.string_, numpy.unicode_]:\u000a        return False, "Variables must be string-like"\u000a    try:\u000a        name=str(name)#convert from unicode if possible\u000a    except:\u000a        if type(name) in [unicode, numpy.unicode_]:\u000a            raise AttributeError, "name %s (type %s) contains non-ASCII characters (e.g. accents)" % (name, type(name))\u000a        else:\u000a            raise AttributeError, "name %s (type %s) could not be converted to a string" % (name, type(name))\u000a\u000a    if name[0].isdigit():\u000a        return False, "Variables cannot begin with numeric character"\u000a    if _nonalphanumeric_re.search(name):\u000a        return False, "Variables cannot contain punctuation or spaces"\u000a    return True, ""\u000a\u000adef _getExcelCellName(col, row):\u000a    """Returns the excel cell name for a row and column (zero-indexed)\u000a\u000a    >>> _getExcelCellName(0,0)\u000a    'A1'\u000a    >>> _getExcelCellName(2,1)\u000a    'C2'\u000a    """\u000a    return "%s%i" %(get_column_letter(col+1), row+1)#BEWARE - openpyxl uses indexing at 1, to fit with Excel\u000a\u000a
p765
sS'thisTrial'
p766
(lp767
sS'_exp'
p768
I325909936
sg10
S'trials'
p769
sg6
S'/Applications/PsychoPy2.app/Contents/Resources/lib/python2.6/psychopy/data.py'
p770
sS'thisRepN'
p771
I5
sS'nTotal'
p772
I120
sg16
g17
sS'data'
p773
g1
(cpsychopy.data
DataHandler
p774
c__builtin__
dict
p775
(dp776
S'ran'
p777
cnumpy.ma.core
_mareconstruct
p778
(cnumpy.ma.core
MaskedArray
p779
cnumpy
ndarray
p780
(I0
tp781
S'b'
tRp782
(I1
(I24
I5
tg37
(S'f4'
I0
I1
tRp783
(I3
S'<'
NNNI-1
I-1
I0
tbI00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg14
g778
(g779
g780
g781
S'b'
tRp784
(I1
(I24
I5
tg783
I00
S'0#\x04?\xb8]\xe0>\xb8g\xcf>\xbc\xe3\x1c?\x14\xd3\x11?\xc4\x98\x08?`j\xd4>Xl\xd3>\xc8w\xe1>@X\x06?\x04\xf1\x06?\xa8\x03\xe9>@\x8b\xbd>\xf0=\xbb>\x08\x9a\xd7>0p\xb8>\x90+\xf6> 9\x91> \x19\xb4>h\xad\xf1>@\xad\xdb>\xe0\x99\xb1>(\xb9\xdb>\xe8\xb7\xc7>\xc0_\xe4>\xbc\xb9\x04?Xz\xed>\xd0\x94\xae>\x00/\xc3>\x10\xde\xd7>\xec\x161?\xa4\xd7\x1a?H)\xf2>,\x9d\x07?\x90\x07\x07?DM\x0c? \xf8\x17?@\xc5\x05?`\xa1\xee>\xd0\x8f.?\x90\xea\xf5>\x08\xe3\x0f?x/\xd7>\xf0S\xa5>X\x9c\xc9>\x80\\\x0b?H\xa2\xe7>\xack\x14?\xd0\x83\xea>\xdc\x18\x13?X@\xc0>l\xf5\x0c?\x189\xdb>\xd0\xc1\xeb>\x00\x1c\xdb>\xb4K\x10?\xe0\xdb\xd5>\xb0L\xc7>\x00V\xb6> \xbf\xe7>\xa0N\x05?\xc4\x19/?\xb0k\xfc>\xf8\x7f\xe5>\x14\xda\x01?\xd8\x0b\xc6>\xf8\x11\x91?\xc8n\xdd> \x05\xe0>\x90(\xdc>\x88\xd9\xdb>\x84"&?\xa8\xfc\xb3>\xf8\xea\xc2>\x10}\xe8>hJ\xaa>\xc8\x06\x12?Pq\xb4>\xe8\xb3\xc4>\x88\xcd\xf7>\x18t\xdb>\xa8\xac\xf6>X\xe4\xb8>\xf0\x16\xd8> \xfa\xef>H\x01\xb8>\xa8 \xcf>0\xa0\xe6>\x90\xe0\xfe>X\xed\xc1>\x18\xca\xf1>\xf8\x89\'?x\xfbt?8\xe3\x08?8[-?\xf4"\x07?\x1am\x95?\x00\x02\xe5>\x08\x0f\xba>\x9cA\x0b?\xc8\x9a\xf2>\xf8Q\x05?\xc0\x06\xd4>\xb0\xad\xbe>\x04L)?\xca\xdb\x85?\xac\xcfA?\x18\xdf\xff>x\x13\xcb>\xe8\xef\xf4>\xd8\xfc\xb7>`\xb7\xef>@XE?\xc0\xe1\xc5>(\xc8\x07?h\x0f\xba>\xa4]\x05?80B@\xd8|\xcc>\xa8\xe8\xd7>'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbsS'order'
p785
g778
(g779
g780
g781
S'b'
tRp786
(I1
(I24
I5
tg783
I00
S'\x00\x00\x00@\x00\x00\x04B\x00\x00xB\x00\x00\xbaB\x00\x00\xccB\x00\x00\xb0A\x00\x00\xe8A\x00\x00\x80B\x00\x00\x9cB\x00\x00\xe6B\x00\x00`A\x00\x004B\x00\x00\x88B\x00\x00\xa6B\x00\x00\xeaB\x00\x00\xa8A\x00\x00\x18B\x00\x00\x84B\x00\x00\xb0B\x00\x00\xd8B\x00\x00\x10A\x00\x00\xd8A\x00\x00`B\x00\x00\x96B\x00\x00\xe2B\x00\x00\xc0@\x00\x00\xc0A\x00\x00hB\x00\x00\xb6B\x00\x00\xe8B\x00\x00 A\x00\x00\x08B\x00\x00\\B\x00\x00\xb2B\x00\x00\xd0B\x00\x00PA\x00\x00\x1cB\x00\x00TB\x00\x00\x98B\x00\x00\xc6B\x00\x00\x90A\x00\x00<B\x00\x00\x8eB\x00\x00\xa2B\x00\x00\xd2B\x00\x00\xa0A\x00\x00$B\x00\x00LB\x00\x00\xbeB\x00\x00\xceB\x00\x00@A\x00\x00,B\x00\x00\x8aB\x00\x00\xa0B\x00\x00\xecB\x00\x00\x00\x00\x00\x00\xc8A\x00\x00pB\x00\x00\xa8B\x00\x00\xc2B\x00\x00\xb8A\x00\x00\xf8A\x00\x00dB\x00\x00\x94B\x00\x00\xd4B\x00\x00\x80A\x00\x00 B\x00\x00|B\x00\x00\xaeB\x00\x00\xdcB\x00\x00\x98A\x00\x000B\x00\x00lB\x00\x00\xbcB\x00\x00\xc8B\x00\x000A\x00\x00\xe0A\x00\x00\x82B\x00\x00\xb4B\x00\x00\xc0B\x00\x00\x80?\x00\x00(B\x00\x00\x86B\x00\x00\xb8B\x00\x00\xcaB\x00\x00\x88A\x00\x00\x14B\x00\x00DB\x00\x00\xa4B\x00\x00\xd6B\x00\x00\xe0@\x00\x00\xf0A\x00\x00PB\x00\x00\xacB\x00\x00\xdaB\x00\x00\xa0@\x00\x00\x10B\x00\x00@B\x00\x00\x9eB\x00\x00\xe4B\x00\x00pA\x00\x00\xd0A\x00\x00tB\x00\x00\xaaB\x00\x00\xdeB\x00\x00\x80@\x00\x00\x00B\x00\x00HB\x00\x00\x9aB\x00\x00\xeeB\x00\x00@@\x00\x008B\x00\x00\x8cB\x00\x00\x90B\x00\x00\xe0B\x00\x00\x00A\x00\x00\x0cB\x00\x00XB\x00\x00\x92B\x00\x00\xc4B'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg15
g778
(g779
g780
g781
S'b'
tRp787
(I1
(I24
I5
tg783
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x00\x00'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp788
(dp789
S'isNumeric'
p790
(dp791
g777
I01
sg14
I01
sg785
I01
sg15
I01
ssg769
g762
sS'dataTypes'
p792
(lp793
g777
ag785
ag14
ag15
asS'dataShape'
p794
(lp795
I24
aI5
asbsS'thisN'
p796
I120
sS'sequenceIndices'
p797
cnumpy.core.multiarray
_reconstruct
p798
(g780
(I0
tS'b'
tRp799
(I1
(I24
I5
tg38
I01
S'\x0b\x00\x00\x00\x10\x00\x00\x00\x00\x00\x00\x00\x16\x00\x00\x00\x15\x00\x00\x00\x13\x00\x00\x00\x05\x00\x00\x00\x12\x00\x00\x00\x17\x00\x00\x00\x04\x00\x00\x00\x06\x00\x00\x00\x0f\x00\x00\x00\n\x00\x00\x00\x07\x00\x00\x00\x02\x00\x00\x00\x14\x00\x00\x00\r\x00\x00\x00\x11\x00\x00\x00\x08\x00\x00\x00\x0e\x00\x00\x00\t\x00\x00\x00\x03\x00\x00\x00\x01\x00\x00\x00\x0c\x00\x00\x00\x05\x00\x00\x00\x0b\x00\x00\x00\x14\x00\x00\x00\x04\x00\x00\x00\x0f\x00\x00\x00\x01\x00\x00\x00\x12\x00\x00\x00\x0c\x00\x00\x00\x15\x00\x00\x00\x00\x00\x00\x00\x06\x00\x00\x00\x17\x00\x00\x00\x13\x00\x00\x00\x11\x00\x00\x00\x03\x00\x00\x00\x07\x00\x00\x00\r\x00\x00\x00\t\x00\x00\x00\x10\x00\x00\x00\n\x00\x00\x00\x0e\x00\x00\x00\x02\x00\x00\x00\x16\x00\x00\x00\x08\x00\x00\x00\x13\x00\x00\x00\x11\x00\x00\x00\x15\x00\x00\x00\t\x00\x00\x00\x12\x00\x00\x00\x07\x00\x00\x00\x17\x00\x00\x00\x06\x00\x00\x00\x04\x00\x00\x00\x0c\x00\x00\x00\x05\x00\x00\x00\x0e\x00\x00\x00\x0b\x00\x00\x00\x14\x00\x00\x00\x00\x00\x00\x00\r\x00\x00\x00\x01\x00\x00\x00\x0f\x00\x00\x00\x03\x00\x00\x00\x10\x00\x00\x00\x02\x00\x00\x00\n\x00\x00\x00\x16\x00\x00\x00\x08\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x0c\x00\x00\x00\x04\x00\x00\x00\x07\x00\x00\x00\x15\x00\x00\x00\x01\x00\x00\x00\x13\x00\x00\x00\n\x00\x00\x00\x08\x00\x00\x00\x11\x00\x00\x00\x02\x00\x00\x00\x0b\x00\x00\x00\x14\x00\x00\x00\x12\x00\x00\x00\r\x00\x00\x00\x03\x00\x00\x00\x06\x00\x00\x00\x0f\x00\x00\x00\x05\x00\x00\x00\x10\x00\x00\x00\x00\x00\x00\x00\x0e\x00\x00\x00\t\x00\x00\x00\x0f\x00\x00\x00\x0b\x00\x00\x00\x17\x00\x00\x00\x07\x00\x00\x00\x0e\x00\x00\x00\x10\x00\x00\x00\x00\x00\x00\x00\t\x00\x00\x00\x06\x00\x00\x00\x08\x00\x00\x00\x0c\x00\x00\x00\x11\x00\x00\x00\x03\x00\x00\x00\x12\x00\x00\x00\r\x00\x00\x00\x14\x00\x00\x00\x16\x00\x00\x00\x04\x00\x00\x00\x13\x00\x00\x00\x01\x00\x00\x00\x05\x00\x00\x00\x02\x00\x00\x00\n\x00\x00\x00\x15\x00\x00\x00'
tbsS'finished'
p800
I01
sS'nReps'
p801
I5
sS'nRemaining'
p802
I-1
sS'trialList'
p803
(lp804
g1
(cpsychopy.data
TrialType
p805
g775
(dp806
g29
I0
sg30
g49
sg31
I-1
stRp807
ag1
(g805
g775
(dp808
g29
F0.10000000000000001
sg30
g49
sg31
I-1
stRp809
ag1
(g805
g775
(dp810
g29
F0.20000000000000001
sg30
g49
sg31
I-1
stRp811
ag1
(g805
g775
(dp812
g29
F0.29999999999999999
sg30
g49
sg31
I-1
stRp813
ag1
(g805
g775
(dp814
g29
F0.40000000000000002
sg30
g49
sg31
I-1
stRp815
ag1
(g805
g775
(dp816
g29
F0.5
sg30
g49
sg31
I-1
stRp817
ag1
(g805
g775
(dp818
g29
I0
sg30
g42
sg31
I-1
stRp819
ag1
(g805
g775
(dp820
g29
F0.10000000000000001
sg30
g42
sg31
I-1
stRp821
ag1
(g805
g775
(dp822
g29
F0.20000000000000001
sg30
g42
sg31
I-1
stRp823
ag1
(g805
g775
(dp824
g29
F0.29999999999999999
sg30
g42
sg31
I-1
stRp825
ag1
(g805
g775
(dp826
g29
F0.40000000000000002
sg30
g42
sg31
I-1
stRp827
ag1
(g805
g775
(dp828
g29
F0.5
sg30
g42
sg31
I-1
stRp829
ag1
(g805
g775
(dp830
g29
I0
sg30
g49
sg31
I1
stRp831
ag1
(g805
g775
(dp832
g29
F0.10000000000000001
sg30
g49
sg31
I1
stRp833
ag1
(g805
g775
(dp834
g29
F0.20000000000000001
sg30
g49
sg31
I1
stRp835
ag1
(g805
g775
(dp836
g29
F0.29999999999999999
sg30
g49
sg31
I1
stRp837
ag1
(g805
g775
(dp838
g29
F0.40000000000000002
sg30
g49
sg31
I1
stRp839
ag1
(g805
g775
(dp840
g29
F0.5
sg30
g49
sg31
I1
stRp841
ag1
(g805
g775
(dp842
g29
I0
sg30
g42
sg31
I1
stRp843
ag1
(g805
g775
(dp844
g29
F0.10000000000000001
sg30
g42
sg31
I1
stRp845
ag1
(g805
g775
(dp846
g29
F0.20000000000000001
sg30
g42
sg31
I1
stRp847
ag1
(g805
g775
(dp848
g29
F0.29999999999999999
sg30
g42
sg31
I1
stRp849
ag1
(g805
g775
(dp850
g29
F0.40000000000000002
sg30
g42
sg31
I1
stRp851
ag1
(g805
g775
(dp852
g29
F0.5
sg30
g42
sg31
I1
stRp853
asS'seed'
p854
NsS'thisIndex'
p855
g755
sS'thisTrialN'
p856
I0
sS'method'
p857
S'random'
p858
sS'_warnUseOfNext'
p859
I01
sbasS'savePickle'
p860
I01
sb.